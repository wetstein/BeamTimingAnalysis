%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: 1512.06148-1.pdf
%%Creator: Adobe Acrobat 9.5.3
%%For: frisch
%%CreationDate: 12/19/2018, 04:23:01 PM
%%BoundingBox: 12 15 600 777
%%HiResBoundingBox: 12 15.6671 599.8801 776.4530
%%CropBox: 12 15.6671 599.8801 776.4530
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (HP Color LaserJet CP4520 Series) (3010.107) 0
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize Letter

	<</PageSize [612 792] /ImagingBBox null /MediaClass null>> setpagedevice
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1198 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
   xmp:CreateDate="2016-01-25T03:31:32Z"
   xmp:CreatorTool="LaTeX with hyperref package"
   xmp:ModifyDate="2016-01-25T03:31:32Z"
   pdf:Keywords=""
   pdf:Producer="pdfTeX-1.40.12"
   pdf:Trapped="False"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.1415926-2.3-1.40.12 (TeX Live 2011) kpathsea version 6.0.1">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>DUNE Collaboration</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">DUNE CDR Long-Baseline Neutrino Facility (LBNF) and Deep Underground Neutrino Experiment (DUNE)</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 66 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (66)]
[/TrimBox [12 15.667053222656 599.88000488281 776.45294189453]]
[/BleedBox [12 15.667053222656 599.88000488281 776.45294189453]]
[/ArtBox [12 15.5471 599.88 776.333 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
12 15.5471 mo
12 776.333 li
599.88 776.333 li
599.88 15.5471 li
cp
clp
[.960588 0 0 .960588 12 15.5471 ]ct
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: RYTBAA+LMSans10-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RYTBAA+LMSans10-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def
/Weight (Normal) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 66 /B put
dup 67 /C put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 150 /endash put
def
/FontBBox {-420 -309 1431 1154} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 444 461 656 678 694 716] def
/BlueScale 0.04546 def
/BlueFuzz 0 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [40 55 56 57 58 59 61 64 65 67 70 80] def
/StemSnapV [57 70 72 75 78 79 80 81 83 84 86 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
28 dict dup begin
/hyphen <1C60D8A8C9B08A959E2F69652E8B76B63AB332EDDEBB69AECBA495D
364909C21596AD861> |-
/two <1C60D8A8C9B7A73DC501F49F480D697B349885D805C68FD010F625C64D
610896ABF018B474299A095D18CFB660F0727C355309B4D23FD497756B4106FD
5DA33F6F30F4A1FAD5D85E5DC049BC495333EBE6D3BC4221110327560D593312
6DE93960C7AE04E5852B59D594894C5869E7A40F7B43FF0644516B822D6A6C99
EAAD7972579C> |-
/three <1C60D8A8C9B7A73D3B44BE7B3BE7FFF019E7EA7925E48040816EBAE8
FED56A334EDB07AA62DD56F0F9EDCB73D088A1BDF759B720885F6C7A10B91CE3
C364D862FE0F7346222CB38C6640C06FD227902E08C8FF1691F25EFF0C7583E7
1BF2A17887BC32CA4D013B17D11D69AF1FB9A4EA6EF606E468CAE5BBE7400B> |-
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5FB8F861534FD6D1BE505
A9F85D0B9C73A3613108085B12A6607AA71745DEED2B1D23FB9D815B9C5B5C86
3D9C1FC206833A80AA19C4345229C24788210CE8D049CA2531ACF3687FCE83E5
16405BAAB71691DB9FECAA422FE> |-
/colon <1C60D8A8C9B08A9570810981675968D99ED2FBF9309D0880A1DECF20
C0BCA00283F1EEA23E9156AB7AD3637D848158E9> |-
/B <1C60D8A8C9B08A944AAF3A41AE503824D9E669EF6A71CB597E1B0809474D
127374DEB6D7D87FF1EEDB569D5CD4FCE57AC981538BB97C2D483C34FEB9DA80
A0FDF0448BFC71F6253C114AB5651B5649EECD39C42BB8274A8E67CCC5F381E4
9F46A96D576EA5CF34217A83E2CC19A56F01E4CD525757BC424607B266AD8A5A
95FD180F0D7267DCBA7E3D570D5FEDB2E99F89404A4E5240C87C060B0F6BA346
71AC92AE34B6> |-
/C <1C60D8A8C9B08A95E5CBCB515510AA7743B2B0B6B2304D176BF5DBAD8F16
F16AE67B024CC7055CCF4381FA4711BE20E97D6F8A3A717F4719544656414CDD
FBDCD98B2FF5A8292CB894EB3487727F1B008E1ED632A660BBF55A6175EF3ABC
0F1627D518409C1DE0D5B8BB371C6EF36BA65DCEAE16EA3918DB79C654C38D37
FFAB704F7BAA1FCB01DF6D8DF0D233F107F01AB5BA25> |-
/L <1C60D8A8C9B08A95CF0AD19F21AB368486DF8CA55F9E30DB4845F2D738A0
E5C29CD3F7CE3F608A8754097DBD76> |-
/N <1C60D8A8C9B08A945A1AB9ADE14334AAF4EDA7CFFBCA5A15D3C3CD995393
0B37EAFA0FC6DB49F34F4397F8EFE30095008FACFA71F2FDDD3808A575066C04
A1A0C1D722E03F59ADEEE607> |-
/O <1C60D8A8C9B08A9451E2C198C46C0EFB0573D159A5AF5D81E655B9B6915A
702E5496E280AE09150FB0678C66C4D9772F910E900EEFA99579866481186927
2438138CE10E30FF6114B4A9DBCB4174F0EEB3FDFA157562FC9FE3E86CBCED57
3BFF1EB73FF16053C389A33EBB2811> |-
/P <1C60D8A8C9B08A95E5CBCB5155108A996190343117BF2C0193E1617EDDA6
23F252644AC09747E26AFEA4EF2E3E311C553B38950B365AFB6AF5814622E834
E9368ED204FBDA8023A1F6E61D5949304AEC6A345AD1D1C19A8CA168> |-
/a <1C60D8A8C9B08A95A7E4088C7A38B070CB5597CB6E5B5727BA54175C0A9F
26B4BA6F8D5C109B9553868F710ADDD3736A3F078DD9501DAEFBD5CA2C0124C4
50E30D8D17D56A2922D2CDFE8A701DE7BBFF584779590DC4CB7E76EECC3AF002
27AB8F2C901A7E7BCA44245DC94399D42577D12ECF952F4AF260934A1BC9> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D45BA2821B5F2C4FA9D3A98DF09174F
19DB7CDE426FEFD9A8E9B4115AA162AAE3914173541BB22EF3B8EC6765C39C0B
0D830D17EDD94E6CD9B1A04090A87E188AA502C687C1ED1E2065596E> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D4688EED3D508397A2A1B06E9E596E8
BA0B06EFF5DB68A2B2DEDDBCB7B6A7B35813A23FFFD2FE0EE478C0BFB7745A31
69762B785AFBDC923FD45580217660D52ED1B556384A2F561D47B21C01BF0BA5
9E724F85A34895701055B24A0081E60FFFF199> |-
/g <1C60D8A8C9B7A73DB6986FAFEA05647ACAACF719178952872C82C4FBC756
96D54A2A9BAFAFD186B5BBEFFEB0325F06FB77A926A5FFB4F86E457291C38178
D59686CE197060FD01584175D2DC1F65F266183ACD7BC8F1FCC7A05335275609
750BA2691A4DD162FB3B7103DE41476B26F8425F1B1C555305FE1A7459CA0E78
529470741CB7D6E88D5BBF1B248B7D201EF368234385DB28FCA41D3E2C66E8F5
95EB12B3FFBAC01E688512E4007DA980ED887846018BFEC874C6A26BCAA6682A
02FDD55FCB3F0EB0FD572C2018031C81BCB9FA0DD0EC36BF79E1C1528830920A
41C8B07A548ED81BD3FC6DD145EE8F445FF040D0763B04> |-
/h <1C60D8A8C9B08A95D5A79985A8270281820D442CA00FB6A3687F1C2D9754
D67BD81B959F253343ACBBF698B2D1169EEFA255FA801EA5AF907C5F39A16F9A
8E2C5C7138DE572E3CD8F2BB9A9A0C00C7F8A4BE4156001E7DE231639B4B5C30
8B> |-
/i <1C60D8A8C9B08A95414C3FF7328C99E33B96F9342722FFF6301D38982B9D
442DCA3C7898D5A560305F3D8F3AD3492F3F64C72A2EAB28125FD0> |-
/l <1C60D8A8C9B08A95414C3FF7328C99E33B9732105571C225B9F6EB8797E1
46C18EC28EFB05> |-
/n <1C60D8A8C9B08A95D5A79985A8270281820D442CA02A1B22B9332C76D110
94B8060F3BEA24BBDB57ECE9C4B7DCA8D335F71FAD7528C0082CFC4B2A37E0E4
7711AA08B8CC8AB83C5570F4> |-
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C22494B732FE83EA
4B6D6068065B0E6391E6287BF0D27D5489B709AAA89C2EA7> |-
/p <1C60D8A8C9B08A95D5A79985A827220D46C815742BB5EB4BB8338FE307B2
74E84E28C7DA9C05A392CB4473E50E255C59BDCD4D8BA0984EB1326A557E439E
ED5BB26D2B576DBBB0CAB185C179D97FA17EA9FBD1152B067D894CEC67EAA4B3
59A6CCA69A99C8C7DC0068642E390B59ECA7F9E017> |-
/r <1C60D8A8C9B08A959965E2515C2EB8648F9B6506702711DD48F6839840DD
DBAD51DB630A9F55971308608F63D9842240748B6628DF5FF59F29B31E> |-
/s <1C60D8A8C9B08A95899606B6B06029417B1C57880E35943F8545280CA8A2
4306B7A4FFF6C039A7E137A8EB2A560A2797BC22589ADB3B915242575C661562
AEF522255122FB33D929A9E3EC2BC4B954037E9DB7FCE3937CC90293EBB5DE11
8C7C8DB128196D9F5B88E7293D7681FB7624E2662B464325B3ECCA6D88A1BBB9
6C0D140311FBB7DDB35768A4FCA20A7A> |-
/t <1C60D8A8C9B08A9591900960B3FA4D96867B930C4350808122587558CB89
B69822C81EB0DA558E1F3CF1A3CD5CAFAAE26015DC8EFC860B3809883EE0077D
C51795D6EE98F0086EC40539B8F276E3A72E816D476711B6C640AD> |-
/u <1C60D8A8C9B08A95D5A79985A8272207708A6E2B6E9CF50E84E6A703B22D
3F17BE482DC937FC59176D44F3C2247CFAAD29D2D0C9DA94DD4D6577D67EA733
BBC277F8DA847A8BC401D4BEE8E30176E2F887C61F9BF7ACA7F2243C> |-
/y <1C60D8A8C9B08A95A8358A0E497F05BF5F721F97AA89C3321B311BE6FCDB
2041F0D8E328A9C666A2D28DAF4285BB8B481230CD42DAB868FFC78291C2DF91
22037E0495EA1EAB2DA5B3892C255799393D6E7600A0A6454205B520712E1175
C8161E7B7074902F6AA11CAA091F> |-
/endash <1C60D8A8C9B7A73DB9ADA16155BB972BF7BAC1BF2C509D40EFDA06E
9441B> |-
/.notdef <1C60D8A8C9B8524C50> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/VTGQVE+LMSans10-Regular /RYTBAA+LMSans10-Regular findfont ct_VMDictPut
/VTGQVE+LMSans10-Regular*1 
[45{/.notdef}rp /hyphen 4{/.notdef}rp /two /three /.notdef /five 4{/.notdef}rp 
/colon 7{/.notdef}rp /B /C 8{/.notdef}rp /L /.notdef /N 
/O /P 16{/.notdef}rp /a /.notdef /c /.notdef /e 
/.notdef /g /h /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u 3{/.notdef}rp 
/y 28{/.notdef}rp /endash 105{/.notdef}rp]
VTGQVE+LMSans10-Regular nf
VTGQVE+LMSans10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
56.693 29.943 mo
(Chapter3:Long-BaselineNeutrinoOscillationPhysics3\22652)
[6.36511 5.14761 4.78809 5.14761 3.59749 4.42841 6.72182 4.98131 6.08517 5.39676 4.98129 5.14761 
4.9813 3.32051 6.64208 4.78809 3.81868 4.42842 2.38013 2.38013 5.14761 7.75592 7.05649 4.42841 
5.14761 3.59747 3.40427 2.38016 5.13763 8.30881 7.33347 3.81866 4.42841 2.38016 2.38013 2.38013 
4.78809 3.5975 2.38013 4.98129 8.46515 6.36511 5.14761 4.59381 3.81866 2.38013 4.42844 257.128 
4.98126 4.98132 4.98126 0 ]xsh
.498 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
56.693 32.801 mo
555.307 32.801 li
1 /0 /CSD get_res sepcs
.5 sep
@
56.693 323.694 mo
281.038 323.694 li
281.038 104.857 li
56.693 104.857 li
cp
0 0 0 0 cmyk
ef
.29679 lw
90.3448 290.868 mo
258.604 290.868 li
258.604 126.741 li
90.3448 126.741 li
cp
.750179 .679652 .670191 .901488 cmyk
@
90.3448 290.868 mo
258.604 290.868 li
258.604 126.741 li
90.3448 126.741 li
cp
@
90.3448 290.868 mo
258.604 290.868 li
258.604 126.741 li
90.3448 126.741 li
cp
@
90.3448 290.868 mo
258.604 290.868 li
258.604 126.741 li
90.3448 126.741 li
cp
@
90.3448 290.868 mo
258.604 290.868 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT /ArialMT findfont ct_VMDictPut
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E /.notdef 
/G 14{/.notdef}rp /V 14{/.notdef}rp /e /.notdef /g 6{/.notdef}rp 
/n 3{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [8.26271 0 0 -8.26271 0 0 ]msf
206.173 312.677 mo
( Energy \(GeV\))
[2.29703 5.51117 4.59406 4.59407 2.75142 4.59407 4.13135 2.29704 2.75142 6.42839 4.59407 5.51115 
0 ]xsh
true set_gvm
%%IncludeResource: font Symbol
/VTGQVG+Symbol /Symbol findfont ct_VMDictPut
/VTGQVG+Symbol*1 
[110{/.notdef}rp /nu 145{/.notdef}rp]
VTGQVG+Symbol nf
reset_gvm
VTGQVG+Symbol*1 [8.26271 0 0 -8.26271 0 0 ]msf
201.916 312.677 mo
(n)sh
90.3448 287.914 mo
90.3448 290.868 li
@
[.39572 .79144 ] 0 dsh
90.3448 126.741 mo
90.3448 290.868 li
@
[] 0 dsh
93.7099 289.391 mo
93.7099 290.868 li
@
97.075 289.391 mo
97.075 290.868 li
@
100.44 289.391 mo
100.44 290.868 li
@
103.805 289.391 mo
103.805 290.868 li
@
107.171 287.914 mo
107.171 290.868 li
@
[.39572 .79144 ] 0 dsh
107.171 126.741 mo
107.171 290.868 li
@
[] 0 dsh
110.536 289.391 mo
110.536 290.868 li
@
113.901 289.391 mo
113.901 290.868 li
@
117.266 289.391 mo
117.266 290.868 li
@
120.631 289.391 mo
120.631 290.868 li
@
123.997 287.914 mo
123.997 290.868 li
@
[.39572 .79144 ] 0 dsh
123.997 126.741 mo
123.997 290.868 li
@
[] 0 dsh
127.362 289.391 mo
127.362 290.868 li
@
130.727 289.391 mo
130.727 290.868 li
@
134.092 289.391 mo
134.092 290.868 li
@
137.457 289.391 mo
137.457 290.868 li
@
140.822 287.914 mo
140.822 290.868 li
@
[.39572 .79144 ] 0 dsh
140.822 126.741 mo
140.822 290.868 li
@
[] 0 dsh
144.187 289.391 mo
144.187 290.868 li
@
147.553 289.391 mo
147.553 290.868 li
@
150.918 289.391 mo
150.918 290.868 li
@
154.283 289.391 mo
154.283 290.868 li
@
157.648 287.914 mo
157.648 290.868 li
@
[.39572 .79144 ] 0 dsh
157.648 126.741 mo
157.648 290.868 li
@
[] 0 dsh
161.013 289.391 mo
161.013 290.868 li
@
164.379 289.391 mo
164.379 290.868 li
@
167.744 289.391 mo
167.744 290.868 li
@
171.109 289.391 mo
171.109 290.868 li
@
174.474 287.914 mo
174.474 290.868 li
@
[.39572 .79144 ] 0 dsh
174.474 126.741 mo
174.474 290.868 li
@
[] 0 dsh
177.839 289.391 mo
177.839 290.868 li
@
181.205 289.391 mo
181.205 290.868 li
@
184.57 289.391 mo
184.57 290.868 li
@
187.935 289.391 mo
187.935 290.868 li
@
191.3 287.914 mo
191.3 290.868 li
@
[.39572 .79144 ] 0 dsh
191.3 126.741 mo
191.3 290.868 li
@
[] 0 dsh
194.665 289.391 mo
194.665 290.868 li
@
198.03 289.391 mo
198.03 290.868 li
@
201.396 289.391 mo
201.396 290.868 li
@
204.761 289.391 mo
204.761 290.868 li
@
208.126 287.914 mo
208.126 290.868 li
@
[.39572 .79144 ] 0 dsh
208.126 126.741 mo
208.126 290.868 li
@
[] 0 dsh
211.491 289.391 mo
211.491 290.868 li
@
214.856 289.391 mo
214.856 290.868 li
@
218.222 289.391 mo
218.222 290.868 li
@
221.587 289.391 mo
221.587 290.868 li
@
224.952 287.914 mo
224.952 290.868 li
@
[.39572 .79144 ] 0 dsh
224.952 126.741 mo
224.952 290.868 li
@
[] 0 dsh
228.317 289.391 mo
228.317 290.868 li
@
231.682 289.391 mo
231.682 290.868 li
@
235.048 289.391 mo
235.048 290.868 li
@
238.413 289.391 mo
238.413 290.868 li
@
241.778 287.914 mo
241.778 290.868 li
@
[.39572 .79144 ] 0 dsh
241.778 126.741 mo
241.778 290.868 li
@
[] 0 dsh
245.143 289.391 mo
245.143 290.868 li
@
248.508 289.391 mo
248.508 290.868 li
@
251.873 289.391 mo
251.873 290.868 li
@
255.238 289.391 mo
255.238 290.868 li
@
258.604 287.914 mo
258.604 290.868 li
@
[.39572 .79144 ] 0 dsh
258.604 126.741 mo
258.604 290.868 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
11{/.notdef}rp /E /.notdef /G 14{/.notdef}rp /V 14{/.notdef}rp /e 
/.notdef /g 6{/.notdef}rp /n 3{/.notdef}rp /r 6{/.notdef}rp /y 
134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
88.2415 297.904 mo
(0)sh
105.518 297.904 mo
(1)sh
121.793 297.904 mo
(2)sh
138.82 297.904 mo
(3)sh
155.595 297.904 mo
(4)sh
172.371 297.904 mo
(5)sh
189.147 297.904 mo
(6)sh
205.923 297.904 mo
(7)sh
222.949 297.904 mo
(8)sh
239.725 297.904 mo
(9)sh
254.497 297.904 mo
(10)
[4.03722 0 ]xsh
[] 0 dsh
90.3448 126.741 mo
258.604 126.741 li
@
90.3448 129.695 mo
90.3448 126.741 li
@
93.7099 128.218 mo
93.7099 126.741 li
@
97.075 128.218 mo
97.075 126.741 li
@
100.44 128.218 mo
100.44 126.741 li
@
103.805 128.218 mo
103.805 126.741 li
@
107.171 129.695 mo
107.171 126.741 li
@
110.536 128.218 mo
110.536 126.741 li
@
113.901 128.218 mo
113.901 126.741 li
@
117.266 128.218 mo
117.266 126.741 li
@
120.631 128.218 mo
120.631 126.741 li
@
123.997 129.695 mo
123.997 126.741 li
@
127.362 128.218 mo
127.362 126.741 li
@
130.727 128.218 mo
130.727 126.741 li
@
134.092 128.218 mo
134.092 126.741 li
@
137.457 128.218 mo
137.457 126.741 li
@
140.822 129.695 mo
140.822 126.741 li
@
144.187 128.218 mo
144.187 126.741 li
@
147.553 128.218 mo
147.553 126.741 li
@
150.918 128.218 mo
150.918 126.741 li
@
154.283 128.218 mo
154.283 126.741 li
@
157.648 129.695 mo
157.648 126.741 li
@
161.013 128.218 mo
161.013 126.741 li
@
164.379 128.218 mo
164.379 126.741 li
@
167.744 128.218 mo
167.744 126.741 li
@
171.109 128.218 mo
171.109 126.741 li
@
174.474 129.695 mo
174.474 126.741 li
@
177.839 128.218 mo
177.839 126.741 li
@
181.205 128.218 mo
181.205 126.741 li
@
184.57 128.218 mo
184.57 126.741 li
@
187.935 128.218 mo
187.935 126.741 li
@
191.3 129.695 mo
191.3 126.741 li
@
194.665 128.218 mo
194.665 126.741 li
@
198.03 128.218 mo
198.03 126.741 li
@
201.396 128.218 mo
201.396 126.741 li
@
204.761 128.218 mo
204.761 126.741 li
@
208.126 129.695 mo
208.126 126.741 li
@
211.491 128.218 mo
211.491 126.741 li
@
214.856 128.218 mo
214.856 126.741 li
@
218.222 128.218 mo
218.222 126.741 li
@
221.587 128.218 mo
221.587 126.741 li
@
224.952 129.695 mo
224.952 126.741 li
@
228.317 128.218 mo
228.317 126.741 li
@
231.682 128.218 mo
231.682 126.741 li
@
235.048 128.218 mo
235.048 126.741 li
@
238.413 128.218 mo
238.413 126.741 li
@
241.778 129.695 mo
241.778 126.741 li
@
245.143 128.218 mo
245.143 126.741 li
@
248.508 128.218 mo
248.508 126.741 li
@
251.873 128.218 mo
251.873 126.741 li
@
255.238 128.218 mo
255.238 126.741 li
@
258.604 129.695 mo
258.604 126.741 li
@
90.3448 290.868 mo
90.3448 126.741 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 
/one /two /three /four /five /six /seven /eight 
/nine 11{/.notdef}rp /E /.notdef /G 7{/.notdef}rp /O /P 
3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a 3{/.notdef}rp /e 
/f /g 3{/.notdef}rp /k /l /m /n 3{/.notdef}rp 
/r /.notdef /t /u 2{/.notdef}rp /x /y 134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
73.9696 188.736 mo
( POT at 1300 km)
[-2.29704 -5.51117 -6.42838 -5.04846 -2.29703 -4.59407 -2.29703 -2.29704 -4.59407 -4.59406 -4.59407 -4.59407 
-2.29703 -4.13136 0 ]ysh
VTGQVF+ArialMT*1 [0 -5.50846 -5.50846 0 0 0 ]msf
69.9634 194.745 mo
(20)
[-3.06271 0 ]ysh
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
73.9696 225.042 mo
(/GeV/10)
[-2.29704 -6.42839 -4.59406 -5.51117 -2.29704 -4.59406 0 ]ysh
VTGQVF+ArialMT*1 [0 -5.50846 -5.50846 0 0 0 ]msf
70.2138 228.047 mo
(2)sh
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
73.9696 251.834 mo
( flux/m)
[-2.29704 -2.29703 -1.8342 -4.59407 -4.13135 -2.29704 0 ]ysh
VTGQVG+Symbol*1 [0 -8.26271 -8.26271 0 0 0 ]msf
73.9696 256.09 mo
(n)sh
91.8591 278.517 mo
90.3448 278.517 li
@
91.8591 271.291 mo
90.3448 271.291 li
@
91.8591 266.165 mo
90.3448 266.165 li
@
91.8591 262.188 mo
90.3448 262.188 li
@
91.8591 258.94 mo
90.3448 258.94 li
@
91.8591 256.192 mo
90.3448 256.192 li
@
91.8591 253.813 mo
90.3448 253.813 li
@
91.8591 251.714 mo
90.3448 251.714 li
@
93.3734 249.837 mo
90.3448 249.837 li
@
[.39572 .79144 ] 0 dsh
258.604 249.837 mo
90.3448 249.837 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
85.9881 250.081 mo
(7)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
78.2261 253.085 mo
(10)
[4.03722 0 ]xsh
[] 0 dsh
91.8591 237.485 mo
90.3448 237.485 li
@
91.8591 230.259 mo
90.3448 230.259 li
@
91.8591 225.133 mo
90.3448 225.133 li
@
91.8591 221.157 mo
90.3448 221.157 li
@
91.8591 217.908 mo
90.3448 217.908 li
@
91.8591 215.161 mo
90.3448 215.161 li
@
91.8591 212.781 mo
90.3448 212.781 li
@
91.8591 210.682 mo
90.3448 210.682 li
@
93.3734 208.805 mo
90.3448 208.805 li
@
[.39572 .79144 ] 0 dsh
258.604 208.805 mo
90.3448 208.805 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
85.9881 208.767 mo
(8)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
78.2261 212.022 mo
(10)
[4.03722 0 ]xsh
[] 0 dsh
91.8591 196.453 mo
90.3448 196.453 li
@
91.8591 189.228 mo
90.3448 189.228 li
@
91.8591 184.101 mo
90.3448 184.101 li
@
91.8591 180.125 mo
90.3448 180.125 li
@
91.8591 176.876 mo
90.3448 176.876 li
@
91.8591 174.129 mo
90.3448 174.129 li
@
91.8591 171.749 mo
90.3448 171.749 li
@
91.8591 169.65 mo
90.3448 169.65 li
@
93.3734 167.773 mo
90.3448 167.773 li
@
[.39572 .79144 ] 0 dsh
258.604 167.773 mo
90.3448 167.773 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
85.9881 167.704 mo
(9)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
78.2261 170.959 mo
(10)
[4.03722 0 ]xsh
[] 0 dsh
91.8591 155.421 mo
90.3448 155.421 li
@
91.8591 148.196 mo
90.3448 148.196 li
@
91.8591 143.069 mo
90.3448 143.069 li
@
91.8591 139.093 mo
90.3448 139.093 li
@
91.8591 135.844 mo
90.3448 135.844 li
@
91.8591 133.097 mo
90.3448 133.097 li
@
91.8591 130.717 mo
90.3448 130.717 li
@
91.8591 128.618 mo
90.3448 128.618 li
@
93.3734 126.741 mo
90.3448 126.741 li
@
[.39572 .79144 ] 0 dsh
258.604 126.741 mo
90.3448 126.741 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
83.2338 126.641 mo
(10)
[2.64506 0 ]xsh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
75.4719 129.896 mo
(10)
[4.03722 0 ]xsh
[] 0 dsh
258.604 290.868 mo
258.604 126.741 li
@
257.089 278.517 mo
258.604 278.517 li
@
257.089 271.291 mo
258.604 271.291 li
@
257.089 266.165 mo
258.604 266.165 li
@
257.089 262.188 mo
258.604 262.188 li
@
257.089 258.94 mo
258.604 258.94 li
@
257.089 256.192 mo
258.604 256.192 li
@
257.089 253.813 mo
258.604 253.813 li
@
257.089 251.714 mo
258.604 251.714 li
@
255.575 249.837 mo
258.604 249.837 li
@
257.089 237.485 mo
258.604 237.485 li
@
257.089 230.259 mo
258.604 230.259 li
@
257.089 225.133 mo
258.604 225.133 li
@
257.089 221.157 mo
258.604 221.157 li
@
257.089 217.908 mo
258.604 217.908 li
@
257.089 215.161 mo
258.604 215.161 li
@
257.089 212.781 mo
258.604 212.781 li
@
257.089 210.682 mo
258.604 210.682 li
@
255.575 208.805 mo
258.604 208.805 li
@
257.089 196.453 mo
258.604 196.453 li
@
257.089 189.228 mo
258.604 189.228 li
@
257.089 184.101 mo
258.604 184.101 li
@
257.089 180.125 mo
258.604 180.125 li
@
257.089 176.876 mo
258.604 176.876 li
@
257.089 174.129 mo
258.604 174.129 li
@
257.089 171.749 mo
258.604 171.749 li
@
257.089 169.65 mo
258.604 169.65 li
@
255.575 167.773 mo
258.604 167.773 li
@
257.089 155.421 mo
258.604 155.421 li
@
257.089 148.196 mo
258.604 148.196 li
@
257.089 143.069 mo
258.604 143.069 li
@
257.089 139.093 mo
258.604 139.093 li
@
257.089 135.844 mo
258.604 135.844 li
@
257.089 133.097 mo
258.604 133.097 li
@
257.089 130.717 mo
258.604 130.717 li
@
257.089 128.618 mo
258.604 128.618 li
@
255.575 126.741 mo
258.604 126.741 li
@
.59358 lw
90.3448 268.976 mo
93.7099 268.976 li
93.7099 252.587 li
97.075 252.587 li
97.075 246.5 li
100.44 246.5 li
100.44 243.06 li
103.805 243.06 li
103.805 240.96 li
107.171 240.96 li
107.171 239.994 li
110.536 239.994 li
110.536 239.612 li
113.901 239.612 li
113.901 239.889 li
117.266 239.889 li
117.266 240.823 li
120.631 240.823 li
120.631 241.015 li
123.997 241.015 li
123.997 242.41 li
127.362 242.41 li
127.362 243.03 li
130.727 243.03 li
130.727 243.363 li
134.092 243.363 li
134.092 243.909 li
137.457 243.909 li
137.457 245.289 li
140.822 245.289 li
140.822 246.028 li
144.187 246.028 li
144.187 247.393 li
147.553 247.393 li
147.553 247.899 li
150.918 247.899 li
150.918 248.183 li
154.283 248.183 li
154.283 249.208 li
157.648 249.208 li
157.648 250.213 li
161.013 250.213 li
161.013 250.133 li
164.379 250.133 li
164.379 251.059 li
167.744 251.059 li
167.744 252.069 li
171.109 252.069 li
171.109 252.703 li
174.474 252.703 li
174.474 253.096 li
177.839 253.096 li
177.839 254.349 li
181.205 254.349 li
181.205 255.13 li
184.57 255.13 li
184.57 256.027 li
187.935 256.027 li
187.935 256.757 li
191.3 256.757 li
191.3 256.709 li
194.665 256.709 li
194.665 257.21 li
198.03 257.21 li
198.03 258.351 li
201.396 258.351 li
201.396 258.893 li
204.761 258.893 li
204.761 259.493 li
208.126 259.493 li
208.126 260.873 li
211.491 260.873 li
211.491 261.268 li
214.856 261.268 li
214.856 261.837 li
218.222 261.837 li
218.222 261.529 li
221.587 261.529 li
221.587 262.048 li
224.952 262.048 li
224.952 262.908 li
228.317 262.908 li
228.317 263.2 li
231.682 263.2 li
231.682 263.563 li
235.048 263.563 li
235.048 264.943 li
238.413 264.943 li
238.413 265.537 li
241.778 265.537 li
241.778 265.379 li
245.143 265.379 li
245.143 265.746 li
248.508 265.746 li
248.508 265.573 li
251.873 265.573 li
251.873 266.575 li
255.238 266.575 li
255.238 267.35 li
258.604 267.35 li
258.604 268.272 li
0 .990631 1 .000396735 cmyk
@
90.3448 197.496 mo
93.7099 197.496 li
93.7099 200.283 li
97.075 200.283 li
97.075 202.731 li
100.44 202.731 li
100.44 201.865 li
103.805 201.865 li
103.805 200.706 li
107.171 200.706 li
107.171 199.468 li
110.536 199.468 li
110.536 198.427 li
113.901 198.427 li
113.901 197.466 li
117.266 197.466 li
117.266 196.667 li
120.631 196.667 li
120.631 196.142 li
123.997 196.142 li
123.997 195.665 li
127.362 195.665 li
127.362 195.477 li
130.727 195.477 li
130.727 195.528 li
134.092 195.528 li
134.092 195.685 li
137.457 195.685 li
137.457 196.046 li
140.822 196.046 li
140.822 196.683 li
144.187 196.683 li
144.187 197.573 li
147.553 197.573 li
147.553 198.492 li
150.918 198.492 li
150.918 199.805 li
154.283 199.805 li
154.283 201.115 li
157.648 201.115 li
157.648 202.571 li
161.013 202.571 li
161.013 203.852 li
164.379 203.852 li
164.379 205.105 li
167.744 205.105 li
167.744 205.698 li
171.109 205.698 li
171.109 205.705 li
174.474 205.705 li
174.474 205.607 li
177.839 205.607 li
177.839 205.249 li
181.205 205.249 li
181.205 204.829 li
184.57 204.829 li
184.57 204.34 li
187.935 204.34 li
187.935 204.052 li
191.3 204.052 li
191.3 204.077 li
194.665 204.077 li
194.665 204.508 li
198.03 204.508 li
198.03 205.171 li
201.396 205.171 li
201.396 206.006 li
204.761 206.006 li
204.761 206.809 li
208.126 206.809 li
208.126 207.621 li
211.491 207.621 li
211.491 208.423 li
214.856 208.423 li
214.856 209.411 li
218.222 209.411 li
218.222 210.35 li
221.587 210.35 li
221.587 211.492 li
224.952 211.492 li
224.952 212.04 li
228.317 212.04 li
228.317 213.144 li
231.682 213.144 li
231.682 213.345 li
235.048 213.345 li
235.048 214.416 li
238.413 214.416 li
238.413 214.548 li
241.778 214.548 li
241.778 215.77 li
245.143 215.77 li
245.143 216.199 li
248.508 216.199 li
248.508 217.224 li
251.873 217.224 li
251.873 217.998 li
255.238 217.998 li
255.238 218.752 li
258.604 218.752 li
258.604 218.951 li
.895628 .7673 0 0 cmyk
@
90.3448 192.101 mo
93.7099 192.101 li
93.7099 180.198 li
97.075 180.198 li
97.075 174.385 li
100.44 174.385 li
100.44 166.163 li
103.805 166.163 li
103.805 159.077 li
107.171 159.077 li
107.171 154.049 li
110.536 154.049 li
110.536 151.478 li
113.901 151.478 li
113.901 149.89 li
117.266 149.89 li
117.266 148.801 li
120.631 148.801 li
120.631 148.144 li
123.997 148.144 li
123.997 147.474 li
127.362 147.474 li
127.362 146.765 li
130.727 146.765 li
130.727 146.367 li
134.092 146.367 li
134.092 146.485 li
137.457 146.485 li
137.457 146.747 li
140.822 146.747 li
140.822 147.004 li
144.187 147.004 li
144.187 147.425 li
147.553 147.425 li
147.553 148.155 li
150.918 148.155 li
150.918 149.093 li
154.283 149.093 li
154.283 150.34 li
157.648 150.34 li
157.648 151.843 li
161.013 151.843 li
161.013 153.502 li
164.379 153.502 li
164.379 155.469 li
167.744 155.469 li
167.744 157.833 li
171.109 157.833 li
171.109 160.534 li
174.474 160.534 li
174.474 163.584 li
177.839 163.584 li
177.839 166.776 li
181.205 166.776 li
181.205 169.978 li
184.57 169.978 li
184.57 173.316 li
187.935 173.316 li
187.935 176.889 li
191.3 176.889 li
191.3 180.39 li
194.665 180.39 li
194.665 183.899 li
198.03 183.899 li
198.03 187.321 li
201.396 187.321 li
201.396 190.52 li
204.761 190.52 li
204.761 193.524 li
208.126 193.524 li
208.126 195.916 li
211.491 195.916 li
211.491 198.329 li
214.856 198.329 li
214.856 200.021 li
218.222 200.021 li
218.222 201.597 li
221.587 201.597 li
221.587 203.048 li
224.952 203.048 li
224.952 203.888 li
228.317 203.888 li
228.317 204.97 li
231.682 204.97 li
231.682 205.734 li
235.048 205.734 li
235.048 206.828 li
238.413 206.828 li
238.413 207.481 li
241.778 207.481 li
241.778 208.221 li
245.143 208.221 li
245.143 208.944 li
248.508 208.944 li
248.508 209.308 li
251.873 209.308 li
251.873 210.218 li
255.238 210.218 li
255.238 210.34 li
258.604 210.34 li
258.604 211.215 li
.750179 .679652 .670191 .901488 cmyk
@
90.3448 289.433 mo
93.7099 289.433 li
93.7099 281.202 li
97.075 281.202 li
97.075 280.688 li
100.44 280.688 li
100.44 281.11 li
103.805 281.11 li
103.805 280.529 li
107.171 280.529 li
107.171 280.533 li
110.536 280.533 li
110.536 279.807 li
113.901 279.807 li
113.901 280.117 li
117.266 280.117 li
117.266 279.742 li
120.631 279.742 li
120.631 279.309 li
123.997 279.309 li
123.997 279.198 li
127.362 279.198 li
127.362 278.056 li
130.727 278.056 li
130.727 277.986 li
134.092 277.986 li
134.092 277.418 li
137.457 277.418 li
137.457 277.077 li
140.822 277.077 li
140.822 277.17 li
144.187 277.17 li
144.187 277.149 li
147.553 277.149 li
147.553 276.313 li
150.918 276.313 li
150.918 276.925 li
154.283 276.925 li
154.283 276.555 li
157.648 276.555 li
157.648 276.2 li
161.013 276.2 li
161.013 276.056 li
164.379 276.056 li
164.379 276.311 li
167.744 276.311 li
167.744 275.646 li
171.109 275.646 li
171.109 276.557 li
174.474 276.557 li
174.474 276.242 li
177.839 276.242 li
177.839 276.147 li
181.205 276.147 li
181.205 275.402 li
184.57 275.402 li
184.57 276.591 li
187.935 276.591 li
187.935 275.499 li
191.3 275.499 li
191.3 276.232 li
194.665 276.232 li
194.665 276.935 li
198.03 276.935 li
198.03 276.856 li
201.396 276.856 li
201.396 277.187 li
204.761 277.187 li
204.761 276.925 li
208.126 276.925 li
208.126 277.148 li
211.491 277.148 li
211.491 277.494 li
214.856 277.494 li
214.856 277.951 li
218.222 277.951 li
218.222 278.008 li
221.587 278.008 li
221.587 277.531 li
224.952 277.531 li
224.952 277.921 li
228.317 277.921 li
228.317 278.481 li
231.682 278.481 li
231.682 278.314 li
235.048 278.314 li
235.048 279.192 li
238.413 279.192 li
238.413 278.621 li
241.778 278.621 li
241.778 279.471 li
245.143 279.471 li
245.143 279.619 li
248.508 279.619 li
248.508 280.46 li
251.873 280.46 li
251.873 280.464 li
255.238 280.464 li
255.238 279.971 li
258.604 279.971 li
258.604 280.285 li
.265019 .809232 0 0 cmyk
@
187.645 160.943 mo
241.227 160.943 li
241.227 138.91 li
187.645 138.91 li
cp
0 0 0 0 cmyk
ef
.750179 .679652 .670191 .901488 cmyk
true set_gvm
%%IncludeResource: font Symbol
/VTGQVG+Symbol*1 
[109{/.notdef}rp /mu /nu 145{/.notdef}rp]
VTGQVG+Symbol nf
reset_gvm
VTGQVG+Symbol*1 [3.00462 0 0 -3.00462 0 0 ]msf
203.419 143.667 mo
(m)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
200.915 142.666 mo
(n)sh
189.654 141.664 mo
199.031 141.664 li
@
.29679 lw
193.946 141.664 mo
194.342 141.664 li
@
VTGQVG+Symbol*1 [3.00462 0 0 -3.00462 0 0 ]msf
203.419 149.175 mo
(m)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
200.915 148.174 mo
(n)sh
0 lw
200.915 145.169 mo
203.419 145.169 li
@
.59358 lw
189.654 147.172 mo
199.031 147.172 li
.895628 .7673 0 0 cmyk
@
.29679 lw
193.946 147.172 mo
194.342 147.172 li
.750179 .679652 .670191 .901488 cmyk
@
true set_gvm
%%IncludeResource: font Arial-BoldMT
/VTGQVH+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut
/VTGQVH+Arial-BoldMT*1 
[101{/.notdef}rp /e 154{/.notdef}rp]
VTGQVH+Arial-BoldMT nf
reset_gvm
VTGQVH+Arial-BoldMT*1 [3.00462 0 0 -3.00462 0 0 ]msf
203.419 154.934 mo
(e)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
200.915 153.682 mo
(n)sh
.59358 lw
189.654 152.681 mo
199.031 152.681 li
0 .990631 1 .000396735 cmyk
@
.29679 lw
193.946 152.681 mo
194.342 152.681 li
.750179 .679652 .670191 .901488 cmyk
@
VTGQVH+Arial-BoldMT*1 [3.00462 0 0 -3.00462 0 0 ]msf
203.419 160.443 mo
(e)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
200.915 159.191 mo
(n)sh
0 lw
200.915 156.186 mo
203.419 156.186 li
@
.59358 lw
189.654 158.189 mo
199.031 158.189 li
.265019 .809232 0 0 cmyk
@
.29679 lw
193.946 158.189 mo
194.342 158.189 li
.750179 .679652 .670191 .901488 cmyk
@
327.03 323.694 mo
551.375 323.694 li
551.375 104.857 li
327.03 104.857 li
cp
0 0 0 0 cmyk
ef
360.682 290.868 mo
528.941 290.868 li
528.941 126.741 li
360.682 126.741 li
cp
.750179 .679652 .670191 .901488 cmyk
@
360.682 290.868 mo
528.941 290.868 li
528.941 126.741 li
360.682 126.741 li
cp
@
360.682 290.868 mo
528.941 290.868 li
528.941 126.741 li
360.682 126.741 li
cp
@
360.682 290.868 mo
528.941 290.868 li
528.941 126.741 li
360.682 126.741 li
cp
@
360.682 290.868 mo
528.941 290.868 li
@
VTGQVF+ArialMT*1 [8.26271 0 0 -8.26271 0 0 ]msf
476.51 312.677 mo
( Energy \(GeV\))
[2.29703 5.51117 4.59406 4.59406 2.75143 4.59406 4.13135 2.29706 2.7514 6.42838 4.59406 5.51117 
0 ]xsh
VTGQVG+Symbol*1 [8.26271 0 0 -8.26271 0 0 ]msf
472.253 312.677 mo
(n)sh
360.682 287.914 mo
360.682 290.868 li
@
[.39572 .79144 ] 0 dsh
360.682 126.741 mo
360.682 290.868 li
@
[] 0 dsh
364.047 289.391 mo
364.047 290.868 li
@
367.412 289.391 mo
367.412 290.868 li
@
370.777 289.391 mo
370.777 290.868 li
@
374.142 289.391 mo
374.142 290.868 li
@
377.508 287.914 mo
377.508 290.868 li
@
[.39572 .79144 ] 0 dsh
377.508 126.741 mo
377.508 290.868 li
@
[] 0 dsh
380.873 289.391 mo
380.873 290.868 li
@
384.238 289.391 mo
384.238 290.868 li
@
387.603 289.391 mo
387.603 290.868 li
@
390.968 289.391 mo
390.968 290.868 li
@
394.334 287.914 mo
394.334 290.868 li
@
[.39572 .79144 ] 0 dsh
394.334 126.741 mo
394.334 290.868 li
@
[] 0 dsh
397.699 289.391 mo
397.699 290.868 li
@
401.064 289.391 mo
401.064 290.868 li
@
404.429 289.391 mo
404.429 290.868 li
@
407.794 289.391 mo
407.794 290.868 li
@
411.159 287.914 mo
411.159 290.868 li
@
[.39572 .79144 ] 0 dsh
411.159 126.741 mo
411.159 290.868 li
@
[] 0 dsh
414.524 289.391 mo
414.524 290.868 li
@
417.89 289.391 mo
417.89 290.868 li
@
421.255 289.391 mo
421.255 290.868 li
@
424.62 289.391 mo
424.62 290.868 li
@
427.985 287.914 mo
427.985 290.868 li
@
[.39572 .79144 ] 0 dsh
427.985 126.741 mo
427.985 290.868 li
@
[] 0 dsh
431.35 289.391 mo
431.35 290.868 li
@
434.716 289.391 mo
434.716 290.868 li
@
438.081 289.391 mo
438.081 290.868 li
@
441.446 289.391 mo
441.446 290.868 li
@
444.811 287.914 mo
444.811 290.868 li
@
[.39572 .79144 ] 0 dsh
444.811 126.741 mo
444.811 290.868 li
@
[] 0 dsh
448.176 289.391 mo
448.176 290.868 li
@
451.542 289.391 mo
451.542 290.868 li
@
454.907 289.391 mo
454.907 290.868 li
@
458.272 289.391 mo
458.272 290.868 li
@
461.637 287.914 mo
461.637 290.868 li
@
[.39572 .79144 ] 0 dsh
461.637 126.741 mo
461.637 290.868 li
@
[] 0 dsh
465.002 289.391 mo
465.002 290.868 li
@
468.367 289.391 mo
468.367 290.868 li
@
471.733 289.391 mo
471.733 290.868 li
@
475.098 289.391 mo
475.098 290.868 li
@
478.463 287.914 mo
478.463 290.868 li
@
[.39572 .79144 ] 0 dsh
478.463 126.741 mo
478.463 290.868 li
@
[] 0 dsh
481.828 289.391 mo
481.828 290.868 li
@
485.193 289.391 mo
485.193 290.868 li
@
488.559 289.391 mo
488.559 290.868 li
@
491.924 289.391 mo
491.924 290.868 li
@
495.289 287.914 mo
495.289 290.868 li
@
[.39572 .79144 ] 0 dsh
495.289 126.741 mo
495.289 290.868 li
@
[] 0 dsh
498.654 289.391 mo
498.654 290.868 li
@
502.019 289.391 mo
502.019 290.868 li
@
505.385 289.391 mo
505.385 290.868 li
@
508.75 289.391 mo
508.75 290.868 li
@
512.115 287.914 mo
512.115 290.868 li
@
[.39572 .79144 ] 0 dsh
512.115 126.741 mo
512.115 290.868 li
@
[] 0 dsh
515.48 289.391 mo
515.48 290.868 li
@
518.845 289.391 mo
518.845 290.868 li
@
522.21 289.391 mo
522.21 290.868 li
@
525.575 289.391 mo
525.575 290.868 li
@
528.941 287.914 mo
528.941 290.868 li
@
[.39572 .79144 ] 0 dsh
528.941 126.741 mo
528.941 290.868 li
@
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
358.579 297.904 mo
(0)sh
375.855 297.904 mo
(1)sh
392.13 297.904 mo
(2)sh
409.157 297.904 mo
(3)sh
425.932 297.904 mo
(4)sh
442.708 297.904 mo
(5)sh
459.484 297.904 mo
(6)sh
476.26 297.904 mo
(7)sh
493.286 297.904 mo
(8)sh
510.062 297.904 mo
(9)sh
524.834 297.904 mo
(10)
[4.03717 0 ]xsh
[] 0 dsh
360.682 126.741 mo
528.941 126.741 li
@
360.682 129.695 mo
360.682 126.741 li
@
364.047 128.218 mo
364.047 126.741 li
@
367.412 128.218 mo
367.412 126.741 li
@
370.777 128.218 mo
370.777 126.741 li
@
374.142 128.218 mo
374.142 126.741 li
@
377.508 129.695 mo
377.508 126.741 li
@
380.873 128.218 mo
380.873 126.741 li
@
384.238 128.218 mo
384.238 126.741 li
@
387.603 128.218 mo
387.603 126.741 li
@
390.968 128.218 mo
390.968 126.741 li
@
394.334 129.695 mo
394.334 126.741 li
@
397.699 128.218 mo
397.699 126.741 li
@
401.064 128.218 mo
401.064 126.741 li
@
404.429 128.218 mo
404.429 126.741 li
@
407.794 128.218 mo
407.794 126.741 li
@
411.159 129.695 mo
411.159 126.741 li
@
414.524 128.218 mo
414.524 126.741 li
@
417.89 128.218 mo
417.89 126.741 li
@
421.255 128.218 mo
421.255 126.741 li
@
424.62 128.218 mo
424.62 126.741 li
@
427.985 129.695 mo
427.985 126.741 li
@
431.35 128.218 mo
431.35 126.741 li
@
434.716 128.218 mo
434.716 126.741 li
@
438.081 128.218 mo
438.081 126.741 li
@
441.446 128.218 mo
441.446 126.741 li
@
444.811 129.695 mo
444.811 126.741 li
@
448.176 128.218 mo
448.176 126.741 li
@
451.542 128.218 mo
451.542 126.741 li
@
454.907 128.218 mo
454.907 126.741 li
@
458.272 128.218 mo
458.272 126.741 li
@
461.637 129.695 mo
461.637 126.741 li
@
465.002 128.218 mo
465.002 126.741 li
@
468.367 128.218 mo
468.367 126.741 li
@
471.733 128.218 mo
471.733 126.741 li
@
475.098 128.218 mo
475.098 126.741 li
@
478.463 129.695 mo
478.463 126.741 li
@
481.828 128.218 mo
481.828 126.741 li
@
485.193 128.218 mo
485.193 126.741 li
@
488.559 128.218 mo
488.559 126.741 li
@
491.924 128.218 mo
491.924 126.741 li
@
495.289 129.695 mo
495.289 126.741 li
@
498.654 128.218 mo
498.654 126.741 li
@
502.019 128.218 mo
502.019 126.741 li
@
505.385 128.218 mo
505.385 126.741 li
@
508.75 128.218 mo
508.75 126.741 li
@
512.115 129.695 mo
512.115 126.741 li
@
515.48 128.218 mo
515.48 126.741 li
@
518.845 128.218 mo
518.845 126.741 li
@
522.21 128.218 mo
522.21 126.741 li
@
525.575 128.218 mo
525.575 126.741 li
@
528.941 129.695 mo
528.941 126.741 li
@
360.682 290.868 mo
360.682 126.741 li
@
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
344.307 188.736 mo
( POT at 1300 km)
[-2.29704 -5.51117 -6.42838 -5.04846 -2.29703 -4.59407 -2.29703 -2.29704 -4.59407 -4.59406 -4.59407 -4.59407 
-2.29703 -4.13136 0 ]ysh
VTGQVF+ArialMT*1 [0 -5.50846 -5.50846 0 0 0 ]msf
340.3 194.745 mo
(20)
[-3.06271 0 ]ysh
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
344.307 225.042 mo
(/GeV/10)
[-2.29704 -6.42839 -4.59406 -5.51117 -2.29704 -4.59406 0 ]ysh
VTGQVF+ArialMT*1 [0 -5.50846 -5.50846 0 0 0 ]msf
340.551 228.047 mo
(2)sh
VTGQVF+ArialMT*1 [0 -8.26271 -8.26271 0 0 0 ]msf
344.307 251.834 mo
( flux/m)
[-2.29704 -2.29703 -1.8342 -4.59407 -4.13135 -2.29704 0 ]ysh
VTGQVG+Symbol*1 [0 -8.26271 -8.26271 0 0 0 ]msf
344.307 256.09 mo
(n)sh
362.196 278.517 mo
360.682 278.517 li
@
362.196 271.291 mo
360.682 271.291 li
@
362.196 266.165 mo
360.682 266.165 li
@
362.196 262.188 mo
360.682 262.188 li
@
362.196 258.94 mo
360.682 258.94 li
@
362.196 256.192 mo
360.682 256.192 li
@
362.196 253.813 mo
360.682 253.813 li
@
362.196 251.714 mo
360.682 251.714 li
@
363.71 249.837 mo
360.682 249.837 li
@
[.39572 .79144 ] 0 dsh
528.941 249.837 mo
360.682 249.837 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
356.325 250.081 mo
(7)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
348.563 253.085 mo
(10)
[4.0372 0 ]xsh
[] 0 dsh
362.196 237.485 mo
360.682 237.485 li
@
362.196 230.259 mo
360.682 230.259 li
@
362.196 225.133 mo
360.682 225.133 li
@
362.196 221.157 mo
360.682 221.157 li
@
362.196 217.908 mo
360.682 217.908 li
@
362.196 215.161 mo
360.682 215.161 li
@
362.196 212.781 mo
360.682 212.781 li
@
362.196 210.682 mo
360.682 210.682 li
@
363.71 208.805 mo
360.682 208.805 li
@
[.39572 .79144 ] 0 dsh
528.941 208.805 mo
360.682 208.805 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
356.325 208.767 mo
(8)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
348.563 212.022 mo
(10)
[4.0372 0 ]xsh
[] 0 dsh
362.196 196.453 mo
360.682 196.453 li
@
362.196 189.228 mo
360.682 189.228 li
@
362.196 184.101 mo
360.682 184.101 li
@
362.196 180.125 mo
360.682 180.125 li
@
362.196 176.876 mo
360.682 176.876 li
@
362.196 174.129 mo
360.682 174.129 li
@
362.196 171.749 mo
360.682 171.749 li
@
362.196 169.65 mo
360.682 169.65 li
@
363.71 167.773 mo
360.682 167.773 li
@
[.39572 .79144 ] 0 dsh
528.941 167.773 mo
360.682 167.773 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
356.325 167.704 mo
(9)sh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
348.563 170.959 mo
(10)
[4.0372 0 ]xsh
[] 0 dsh
362.196 155.421 mo
360.682 155.421 li
@
362.196 148.196 mo
360.682 148.196 li
@
362.196 143.069 mo
360.682 143.069 li
@
362.196 139.093 mo
360.682 139.093 li
@
362.196 135.844 mo
360.682 135.844 li
@
362.196 133.097 mo
360.682 133.097 li
@
362.196 130.717 mo
360.682 130.717 li
@
362.196 128.618 mo
360.682 128.618 li
@
363.71 126.741 mo
360.682 126.741 li
@
[.39572 .79144 ] 0 dsh
528.941 126.741 mo
360.682 126.741 li
@
VTGQVF+ArialMT*1 [4.75731 0 0 -4.75731 0 0 ]msf
353.571 126.641 mo
(10)
[2.64505 0 ]xsh
VTGQVF+ArialMT*1 [7.26119 0 0 -7.26119 0 0 ]msf
345.809 129.896 mo
(10)
[4.0372 0 ]xsh
[] 0 dsh
528.941 290.868 mo
528.941 126.741 li
@
527.426 278.517 mo
528.941 278.517 li
@
527.426 271.291 mo
528.941 271.291 li
@
527.426 266.165 mo
528.941 266.165 li
@
527.426 262.188 mo
528.941 262.188 li
@
527.426 258.94 mo
528.941 258.94 li
@
527.426 256.192 mo
528.941 256.192 li
@
527.426 253.813 mo
528.941 253.813 li
@
527.426 251.714 mo
528.941 251.714 li
@
525.912 249.837 mo
528.941 249.837 li
@
527.426 237.485 mo
528.941 237.485 li
@
527.426 230.259 mo
528.941 230.259 li
@
527.426 225.133 mo
528.941 225.133 li
@
527.426 221.157 mo
528.941 221.157 li
@
527.426 217.908 mo
528.941 217.908 li
@
527.426 215.161 mo
528.941 215.161 li
@
527.426 212.781 mo
528.941 212.781 li
@
527.426 210.682 mo
528.941 210.682 li
@
525.912 208.805 mo
528.941 208.805 li
@
527.426 196.453 mo
528.941 196.453 li
@
527.426 189.228 mo
528.941 189.228 li
@
527.426 184.101 mo
528.941 184.101 li
@
527.426 180.125 mo
528.941 180.125 li
@
527.426 176.876 mo
528.941 176.876 li
@
527.426 174.129 mo
528.941 174.129 li
@
527.426 171.749 mo
528.941 171.749 li
@
527.426 169.65 mo
528.941 169.65 li
@
525.912 167.773 mo
528.941 167.773 li
@
527.426 155.421 mo
528.941 155.421 li
@
527.426 148.196 mo
528.941 148.196 li
@
527.426 143.069 mo
528.941 143.069 li
@
527.426 139.093 mo
528.941 139.093 li
@
527.426 135.844 mo
528.941 135.844 li
@
527.426 133.097 mo
528.941 133.097 li
@
527.426 130.717 mo
528.941 130.717 li
@
527.426 128.618 mo
528.941 128.618 li
@
525.912 126.741 mo
528.941 126.741 li
@
.59358 lw
360.682 285.837 mo
364.047 285.837 li
364.047 276.583 li
367.412 276.583 li
367.412 276.439 li
370.777 276.439 li
370.777 276.436 li
374.142 276.436 li
374.142 276.486 li
377.508 276.486 li
377.508 276.696 li
380.873 276.696 li
380.873 275.767 li
384.238 275.767 li
384.238 276.662 li
387.603 276.662 li
387.603 276.344 li
390.968 276.344 li
390.968 277.085 li
394.334 277.085 li
394.334 276.302 li
397.699 276.302 li
397.699 276.398 li
401.064 276.398 li
401.064 275.461 li
404.429 275.461 li
404.429 275.267 li
407.794 275.267 li
407.794 274.905 li
411.159 274.905 li
411.159 274.694 li
414.524 274.694 li
414.524 274.43 li
417.89 274.43 li
417.89 274.616 li
421.255 274.616 li
421.255 274.208 li
424.62 274.208 li
424.62 273.749 li
427.985 273.749 li
427.985 272.864 li
431.35 272.864 li
431.35 273.444 li
434.716 273.444 li
434.716 274.567 li
438.081 274.567 li
438.081 274.136 li
441.446 274.136 li
441.446 273.595 li
444.811 273.595 li
444.811 273.414 li
448.176 273.414 li
448.176 274.128 li
451.542 274.128 li
451.542 273.505 li
454.907 273.505 li
454.907 274.277 li
458.272 274.277 li
458.272 273.932 li
461.637 273.932 li
461.637 274.52 li
465.002 274.52 li
465.002 274.244 li
468.367 274.244 li
468.367 273.271 li
471.733 273.271 li
471.733 274.075 li
475.098 274.075 li
475.098 274.655 li
478.463 274.655 li
478.463 275.221 li
481.828 275.221 li
481.828 274.852 li
485.193 274.852 li
485.193 273.827 li
488.559 273.827 li
488.559 274.595 li
491.924 274.595 li
491.924 275.283 li
495.289 275.283 li
495.289 275.281 li
498.654 275.281 li
498.654 276.096 li
502.019 276.096 li
502.019 275.485 li
505.385 275.485 li
505.385 276.107 li
508.75 276.107 li
508.75 277.28 li
512.115 277.28 li
512.115 276.908 li
515.48 276.908 li
515.48 276.773 li
518.845 276.773 li
518.845 276.897 li
522.21 276.897 li
522.21 277.167 li
525.575 277.167 li
525.575 277.139 li
528.941 277.139 li
528.941 278.091 li
0 .990631 1 .000396735 cmyk
@
360.682 192.262 mo
364.047 192.262 li
364.047 180.966 li
367.412 180.966 li
367.412 175.306 li
370.777 175.306 li
370.777 167.234 li
374.142 167.234 li
374.142 160.067 li
377.508 160.067 li
377.508 155.154 li
380.873 155.154 li
380.873 152.658 li
384.238 152.658 li
384.238 151.21 li
387.603 151.21 li
387.603 150.162 li
390.968 150.162 li
390.968 149.574 li
394.334 149.574 li
394.334 148.995 li
397.699 148.995 li
397.699 148.289 li
401.064 148.289 li
401.064 147.996 li
404.429 147.996 li
404.429 148.236 li
407.794 148.236 li
407.794 148.621 li
411.159 148.621 li
411.159 149.006 li
414.524 149.006 li
414.524 149.483 li
417.89 149.483 li
417.89 150.235 li
421.255 150.235 li
421.255 151.32 li
424.62 151.32 li
424.62 152.689 li
427.985 152.689 li
427.985 154.251 li
431.35 154.251 li
431.35 156.005 li
434.716 156.005 li
434.716 158.015 li
438.081 158.015 li
438.081 160.447 li
441.446 160.447 li
441.446 163.37 li
444.811 163.37 li
444.811 166.523 li
448.176 166.523 li
448.176 169.751 li
451.542 169.751 li
451.542 173.084 li
454.907 173.084 li
454.907 176.597 li
458.272 176.597 li
458.272 179.962 li
461.637 179.962 li
461.637 183.677 li
465.002 183.677 li
465.002 187.211 li
468.367 187.211 li
468.367 190.844 li
471.733 190.844 li
471.733 193.911 li
475.098 193.911 li
475.098 197.009 li
478.463 197.009 li
478.463 199.512 li
481.828 199.512 li
481.828 201.944 li
485.193 201.944 li
485.193 203.797 li
488.559 203.797 li
488.559 205.352 li
491.924 205.352 li
491.924 206.99 li
495.289 206.99 li
495.289 207.836 li
498.654 207.836 li
498.654 209.3 li
502.019 209.3 li
502.019 209.802 li
505.385 209.802 li
505.385 210.783 li
508.75 210.783 li
508.75 211.522 li
512.115 211.522 li
512.115 211.98 li
515.48 211.98 li
515.48 212.803 li
518.845 212.803 li
518.845 213.798 li
522.21 213.798 li
522.21 214.51 li
525.575 214.51 li
525.575 214.865 li
528.941 214.865 li
528.941 215.88 li
.895628 .7673 0 0 cmyk
@
360.682 196.312 mo
364.047 196.312 li
364.047 198.827 li
367.412 198.827 li
367.412 201.574 li
370.777 201.574 li
370.777 201.102 li
374.142 201.102 li
374.142 200.085 li
377.508 200.085 li
377.508 198.887 li
380.873 198.887 li
380.873 197.825 li
384.238 197.825 li
384.238 196.892 li
387.603 196.892 li
387.603 196.081 li
390.968 196.081 li
390.968 195.378 li
394.334 195.378 li
394.334 194.869 li
397.699 194.869 li
397.699 194.566 li
401.064 194.566 li
401.064 194.412 li
404.429 194.412 li
404.429 194.495 li
407.794 194.495 li
407.794 194.734 li
411.159 194.734 li
411.159 195.364 li
414.524 195.364 li
414.524 196.193 li
417.89 196.193 li
417.89 197.157 li
421.255 197.157 li
421.255 198.471 li
424.62 198.471 li
424.62 199.596 li
427.985 199.596 li
427.985 201.065 li
431.35 201.065 li
431.35 202.357 li
434.716 202.357 li
434.716 203.27 li
438.081 203.27 li
438.081 203.619 li
441.446 203.619 li
441.446 203.576 li
444.811 203.576 li
444.811 203.258 li
448.176 203.258 li
448.176 203.036 li
451.542 203.036 li
451.542 202.162 li
454.907 202.162 li
454.907 201.717 li
458.272 201.717 li
458.272 201.138 li
461.637 201.138 li
461.637 201.29 li
465.002 201.29 li
465.002 201.644 li
468.367 201.644 li
468.367 202.198 li
471.733 202.198 li
471.733 203.184 li
475.098 203.184 li
475.098 203.954 li
478.463 203.954 li
478.463 204.687 li
481.828 204.687 li
481.828 205.704 li
485.193 205.704 li
485.193 206.584 li
488.559 206.584 li
488.559 207.338 li
491.924 207.338 li
491.924 208.067 li
495.289 208.067 li
495.289 208.966 li
498.654 208.966 li
498.654 209.361 li
502.019 209.361 li
502.019 210.136 li
505.385 210.136 li
505.385 211.218 li
508.75 211.218 li
508.75 211.864 li
512.115 211.864 li
512.115 212.751 li
515.48 212.751 li
515.48 213.052 li
518.845 213.052 li
518.845 213.892 li
522.21 213.892 li
522.21 214.784 li
525.575 214.784 li
525.575 215.413 li
528.941 215.413 li
528.941 216.309 li
.750179 .679652 .670191 .901488 cmyk
@
360.682 270.351 mo
364.047 270.351 li
364.047 254.653 li
367.412 254.653 li
367.412 248.444 li
370.777 248.444 li
370.777 244.727 li
374.142 244.727 li
374.142 243.034 li
377.508 243.034 li
377.508 242.352 li
380.873 242.352 li
380.873 242.031 li
384.238 242.031 li
384.238 242.092 li
387.603 242.092 li
387.603 243.091 li
390.968 243.091 li
390.968 243.498 li
394.334 243.498 li
394.334 245.163 li
397.699 245.163 li
397.699 245.523 li
401.064 245.523 li
401.064 246.775 li
404.429 246.775 li
404.429 248.437 li
407.794 248.437 li
407.794 249.04 li
411.159 249.04 li
411.159 249.838 li
414.524 249.838 li
414.524 250.784 li
417.89 250.784 li
417.89 252.049 li
421.255 252.049 li
421.255 252.231 li
424.62 252.231 li
424.62 253.101 li
427.985 253.101 li
427.985 253.828 li
431.35 253.828 li
431.35 255.287 li
434.716 255.287 li
434.716 256.101 li
438.081 256.101 li
438.081 257.478 li
441.446 257.478 li
441.446 258.206 li
444.811 258.206 li
444.811 258.021 li
448.176 258.021 li
448.176 258.736 li
451.542 258.736 li
451.542 259.486 li
454.907 259.486 li
454.907 260.64 li
458.272 260.64 li
458.272 261.042 li
461.637 261.042 li
461.637 261.599 li
465.002 261.599 li
465.002 263.461 li
468.367 263.461 li
468.367 263.129 li
471.733 263.129 li
471.733 264.148 li
475.098 264.148 li
475.098 264.492 li
478.463 264.492 li
478.463 265.315 li
481.828 265.315 li
481.828 266.004 li
485.193 266.004 li
485.193 265.931 li
488.559 265.931 li
488.559 267.036 li
491.924 267.036 li
491.924 267.733 li
495.289 267.733 li
495.289 267.795 li
498.654 267.795 li
498.654 268.54 li
502.019 268.54 li
502.019 268.261 li
505.385 268.261 li
505.385 270.388 li
508.75 270.388 li
508.75 269.578 li
512.115 269.578 li
512.115 270.2 li
515.48 270.2 li
515.48 270.426 li
518.845 270.426 li
518.845 271.297 li
522.21 271.297 li
522.21 271.552 li
525.575 271.552 li
525.575 272.24 li
528.941 272.24 li
528.941 272.682 li
.265019 .809232 0 0 cmyk
@
439.453 152.931 mo
517.323 152.931 li
517.323 130.897 li
439.453 130.897 li
cp
0 0 0 0 cmyk
ef
.750179 .679652 .670191 .901488 cmyk
VTGQVG+Symbol*1 [3.00462 0 0 -3.00462 0 0 ]msf
461.236 135.655 mo
(m)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
458.733 134.653 mo
(n)sh
442.373 133.651 mo
456 133.651 li
@
.29679 lw
448.791 133.651 mo
449.187 133.651 li
@
VTGQVG+Symbol*1 [3.00462 0 0 -3.00462 0 0 ]msf
461.236 141.163 mo
(m)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
458.733 140.161 mo
(n)sh
0 lw
458.733 137.157 mo
461.236 137.157 li
@
.59358 lw
442.373 139.16 mo
456 139.16 li
.895628 .7673 0 0 cmyk
@
.29679 lw
448.791 139.16 mo
449.187 139.16 li
.750179 .679652 .670191 .901488 cmyk
@
VTGQVH+Arial-BoldMT*1 [3.00462 0 0 -3.00462 0 0 ]msf
461.236 146.922 mo
(e)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
458.733 145.67 mo
(n)sh
.59358 lw
442.373 144.669 mo
456 144.669 li
0 .990631 1 .000396735 cmyk
@
.29679 lw
448.791 144.669 mo
449.187 144.669 li
.750179 .679652 .670191 .901488 cmyk
@
VTGQVH+Arial-BoldMT*1 [3.00462 0 0 -3.00462 0 0 ]msf
461.236 152.43 mo
(e)sh
VTGQVG+Symbol*1 [4.50693 0 0 -4.50693 0 0 ]msf
458.733 151.179 mo
(n)sh
0 lw
458.733 148.174 mo
461.236 148.174 li
@
.59358 lw
442.373 150.177 mo
456 150.177 li
.265019 .809232 0 0 cmyk
@
.29679 lw
448.791 150.177 mo
449.187 150.177 li
.750179 .679652 .670191 .901488 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: OWTBAA+LMSans12-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OWTBAA+LMSans12-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def
/Weight (Normal) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 54 /six put
dup 58 /colon put
dup 70 /F put
dup 71 /G put
dup 78 /N put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 130 /fl put
def
/FontBBox {-411 -308 1407 1154} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 444 459 655 676 694 715] def
/BlueScale 0.04546 def
/BlueFuzz 0 def
/StdHW [60] def
/StdVW [86] def
/StemSnapH [54 55 56 58 60 62 63 65 67 72 78 86] def
/StemSnapV [60 69 70 71 74 75 76 77 79 81 84 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
37 dict dup begin
/parenleft <1C60D8A8C9B08A9588E3899D564A66AA6A9D837DEB5B77308B5B
11B2506AA78992C2877731E26AEDE68B7963E9BEFCD5E2D6CE6ECFDF10C6C1BA
A05AA95DEAFB25DD46C4ADC58EE7DD54066609AB272B> |-
/parenright <1C60D8A8C9B08A9588E3899D564A66AA6A9D837DEB5B59C05AE
400587D6877EBDDBD33DF0A2691E92647CA1265CEAFA71595B1288B910499243
6DC3456A6C6E8195C51D6190F027876CE5DA5357330E964F494> |-
/comma <1C60D8A8C9B85AB935CBF2AD297C5D29FD584B987EB3B4B537DD2AFB
05265D9BC57E269146> |-
/period <1C60D8A8C9B85AB99D45A037EDC399D9E69C31222D7880AF65> |-
/zero <1C60D8A8C9B08A95A31CD7D9F2175101BCEBB87441D30669F685DF4F5
6BA71A133E1874B3138E53F6256067CB2B9F86D4C4E9CE9377188649981297B4
6D6DF9617E593373AF9DC23E2036A9D356BF6842FE4C856FCA624D1BAE96FB68
C53D37A63B8FF49CF76C074AD7CCC3114C1109173F0A414EFA35FD97F499BAA0
BB245594B86ACFBFD58FA23852234> |-
/one <1C60D8A8C9B08A95A31CD7D9F217ACE20F262BC5333DDA52EC41B3F915
45D2932F8C9B055E065BDBAA76DE8133A31DFD8FA54495C4D3291767A906DFD2
9F5D21CD90C7B8E37FA369F09E> |-
/two <1C60D8A8C9B08A95A31CD7D9F217ACE8E4C5480360774D2BCC0776C738
B0A160FBA951CBB977771C34C320DC841F704BC22B3B4E9D4A39DAD34A49CEF4
C3E406E6996EF30ECD8669557C241FC07FE09455101610B1B05C4E15BE68873A
E2E98BA49DB4E0BA23D6320401> |-
/three <1C60D8A8C9B08A95A31CD7D9F2175101BCE4479BE3B00185A090C466
024B93BEC78D057D235F516E06AB0CA2FCBE1E4783E68AE981623D30F07F7365
225E7870E9A3517728B05C5BE2EC88CA6E62B1722CEB2F56088F7FE4DA17F8C4
22085A0E892F07CCE2134538E9F345BE939F2E9599B1CCE3371A039E5AFD4A16
4C1DDF1B> |-
/six <1C60D8A8C9B08A95A31CD7D9F2175101BCEB67A5E9CFA9FA38468FC209
0977D37E6CEF5716BBDCEB41C656935481BC859AB91FCAB660728C23C63B284D
D5D187E2B717E502F59822D5BA94B8219F11320FAFA2C89EEEA9B9E1228EB2E1
E872613BBCEFE7433A27AEE6E63B68B6C5FE4A259315F88451D1BEC750CA1450
D8AF5AE586B9CBF23F4EECE6A569FD11B87010D9516C10AF5FD528E30BB3532A
35B9> |-
/colon <1C60D8A8C9B85AB99D45A02A49765771AC2073C81882CA7DC749314E
01AECDDA8BCB1E84BE2ECC3FEADA> |-
/F <1C60D8A8C9B08A95C5B0FE9162D1A2BE597D172F5DB3277AD9BA321C129C
AA7EBD8BB4D70A4BDFCE80EE6BF73C1F519D2E122B2F4F234799C37CD33565DF
EF992CAEB0B34E> |-
/G <1C60D8A8C9B08A95E212C7DBD64DABF56BDD21BF27476F33D4F1D78C00E3
52D723E6623760B765BE8F69D9829A742873520452A1CCD107640C834FC65725
E788E4AFAB7BCE3DBD1B99B502E8DD27594CD471C50D8632C1492F2433F8563C
E85C424029F68978F3462080F5E240896B17509A12C5C9490F8886B068FA9025
0E1A7B09CCD354FA6D462F91F1C43B8B8BD0377E4923F1EDB42233> |-
/N <1C60D8A8C9B08A9442481B44F9E715BA8BC6E27C674B11ADC658C6540128
37638138ADC26DCA253943E9ADE6B508BA0FA1AA852627DAA6F189EE1C8AC123
9534AED85324AD3274B3336A> |-
/V <1C60D8A8C9B67A40F8E1EE4EEDBFB28C1D9212637C89C3B21D8A345F8ADC
700E025087B9805C84B5F79C3CF48AB14EE8E2E676C1BB19C3290783C8A4E8B0
C076> |-
/a <1C60D8A8C9B08A95AB8DC622FEBB6EFF06B75EF6258DE24B77E70DC7947F
87EA016AE96A56D2AB0168808747EDE284CAE69E3D0DFA10508B228B1AB84122
CA04BB7075722F8E4F5258645A82E62DABA63F1CEAA62BFB95DCB3A66C999784
1F4EE525AEC074BAB6377B954371BF9B9A1BEB2F23FC09AA942B13E0DA581AE7
9D> |-
/b <1C60D8A8C9B08A95D8E840BC3BFE069BA01A04B59EE8524EFB7A805E0011
509B175A35AA21827CDF7EBDFB46C328202C8C17AA3C2D41795E13EF693AFC98
23111672B9F633208DF5D628B41687EA3F8E7BAE29DFA012C0690394E7D3F50B
E23F40D36DE49F1921D4524B15664AD29A1094617D0EBEF2738EE4F92B4A0EB7> |-
/c <1C60D8A8C9B08A95B5589A17E299A83714C20537662F3B21D7AFFE4C0AE2
FA74C404DD774CB6594429DC9074C9F71EF5B10D5A080FDE1B2800D9FB6F4FA8
1DB445B2F7F95516BBF9A400B0EBF3A342E95A84453FDDD0D7D44B7B49CE53C1
5214> |-
/d <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFEA271B326896A1B095D0231C97
7945F7CE69B5503329AB1F546B1161209C67E34F2E3316F5A4F83193AACD1CC1
5815748EEC92C8619AE9E8A4488212423F0586B1FE8D20BE34D30DE79D4010E1
AA988F0E191D72745C4B62242A156DCC7EA6086E2FC36786EF> |-
/e <1C60D8A8C9B08A95B5589A17E299A839B353761A5754405332DB751515E1
39F49B25FCC8C9DC8E3EBCFAC169ACB1889E709DBE3BE8BCDEBEDBEBD2E7A5D0
CB9FE062E3F18084EF2199A0BAFC984A66816B7EE8C60029652889D06920217B
53020185EC7C1238FD2FFA23E1DC9CB61C67D1354D80EB4B613E> |-
/f <1C60D8A8C9B08A9568507F3317200CD271C5210875A5C58F648D4564EF6E
5E6E2726D67ED30E54D5179501C2AEA4BFD5041E313D07B391EAE160299947E6
44DE2E46A25E8460C593AF9458D3E048BF9BF83EDC2BFD4DBA> |-
/g <1C60D8A8C9B08A95A31CD7D9F217DF65C485C2073202EA92182C077CBC4F
4A6160A35FD9157B678D46085B083B40AD5E35C9E5CD7CEE0C8E639860BE1E94
8B8E2CD437F1319ABD045EBCAF63B6D511F9D0F42CD864DDD707B7E2ADA7FEFE
A15B0491DF270FBE476FF00F06818309A399F0415F2EB299C7FC0481A9BA1FCA
6B057154EBECD21551B041C307BE00C6BB4CC66D48A7E75F6522EC75A9DBC202
DC57056CB9EFE16378EB710928F647473D186F7E3695D33728329FE8850EFC63
462F0C6146CF62D94E3A83DEF560DC49DE3EB396F0318E8C31EEF959B007D55D
4BE5C17CFE16BAD24EA0FE50A5A8D29890F6DBD013B5AB591F27E8F759115FD2
8680D1290AA63794E2E1AA> |-
/h <1C60D8A8C9B08A95D8E840BC3BFE5E0C2D065A1A5CE45056B08BD4E3CE85
89E0D1EAB3E897636C6866851A9A1542E0AF788C05EFDC3E2723237F89968D53
DFCF1C6E9B54B9F09FCDC4691A5576F100> |-
/i <1C60D8A8C9B08A9545AEAF563F3866FDCBB9D0C9C18D43891622D1F0EF3F
62F8462754E5AB1AA1829CF88C9325A85C47461AE671B6765DDC11> |-
/l <1C60D8A8C9B08A9545AEAF563F3866FDCBB8F812120DAA0371F98348B86E
707FA11955B32F> |-
/m <1C60D8A8C9B08A95026F9C287FEFB53B82D893DBEB1849630F24AB5DAD61
E665097C2A68D005E5B16B60D8B06FE0D5BCFBBBE0B6EFAF0EF14F62A38BC32D
C5E291F2D3822EAB2EBA0FDD0974E57BF2A2ADA0FB0EA10AE6EA30256FF7B1F9
5D04BCCFEF10BDDD51E5C4337FDBDD> |-
/n <1C60D8A8C9B08A95D8E840BC3BFE5E0C2D065A1A5CC5CC6851690A389335
C689D8A645DE0356DC0BC4E4165136AD93A565F67850D8D38540659B937E3891
9942BE1DFA46D1D3747CBE75> |-
/o <1C60D8A8C9B08A95A31CD7D9F217A69992F44FA90AA023A397851E23C8E4
CBFCD69F4E7C3676D1839CE0A79E45A4141988EDFB3760BD3C43FD952EA4939A
0376EEAE336DFD5CF745E1DE7B039D8D05FC3F3400BB956A8E97ACD4D9> |-
/p <1C60D8A8C9B08A95D8E840BC3BFE7FD1EFE92B0D17363F3C1FA94762A712
3BF4AFCE04970D8233319802725C6140B9416E21054D6372070869CD547B9C35
0A13EF7BE7CACB2BEF03DFFA7015466C699C966B4A10AE145DC285A80F7F90C3
2124C33B03DF5ABE09DDB31178294D5CF0C29C183420> |-
/r <1C60D8A8C9B08A959DB77AE556B1B97949FC99C6ED629EFE03F56671E57C
A68CD42E84DC52898E04691C71C6B1B8F6E2C32C2E567B50D76FA1C0C3> |-
/s <1C60D8A8C9B08A958EAD96EA79E6FAB4F1DCC146B31A115ED25928540A07
2F124B2822660FC962EA7B391D14FA21FC075611E52535097EB40A4847A43677
FDF25D37FE80E98880C30C9EDF3A1F08C416466538E0729F312822DDC85F279C
F9AAC525C4DA77F3B799D3708C976C62D5E3B8EDA1621A3094D299D3AFEF55E1
E5CF14A73D77840CDA96ADA13D48DC37C4> |-
/t <1C60D8A8C9B08A9596B916DE68D8ECF6BB2BE5C5E450A779445DF42D7712
DB44AC435DA6D0F3C6DC3C9116D60ED2E7FB6C9E4ADB76C1920495480DB187C4
4EBD20DD4D97EBE89552FFAA8DE6F59022BDDE76BFE34EF986F2D0F6996173CD
78CAE332FE> |-
/u <1C60D8A8C9B08A95D8E840BC3BFE7FD458E720611AEE1CF8E7B37AF8A0E6
E9DA37485D3E18CD923A50E9D22F6481D839C6523AEC9158E5D482BEB5FDC27D
E6200AE41488A1C3BD9127> |-
/w <1C60D8A8C9B08A950544B9416916651E03EF39500C41B81EFD4E1CAD4C9B
FF0B7424043ACFFFDB263F828C711F15BC55ABEA78E3F922EC2E73AD85A2063E
62E6B58DD52944B618B9462EF19FE3D125BF7A059F957B9B9B33AA96127B647E
1952B78DFCCBEAE1AA1BC4B213A96090665D3FF4E51F51> |-
/x <1C60D8A8C9B08A95B2CCC00C0CACFC615DA4E8981599B65070ED31E95118
C6B5AFA1026621869F69D6F7702D077CE8797A35A5AE150E20F266D74762238D
1B8F8A9E2BCC0523C601D1ED2486> |-
/y <1C60D8A8C9B08A95B2CCC00C0CACA7ED3EA7F889403F40AE2209394BA033
A577475E0AAE0A92EC429D36AEC398CAD8656B3AE02553AC2F11E9172FA8BBAE
E4051FDDC4C2550534307699CA68692459583693E025C7F60E78785B901E9D3D
FAE01C5368> |-
/fl <1C60D8A8C9B08A95D031A4009E0F873E2FDD0C3FAA05AD70558CBBAB293
4CD98D0E754729525D8A2023844D35140C844C9EA76767C2BEA65E29CDB7BD29
08A90015ECBFF1058F8710293FD45231EF75FC6ACE0B361D3459DDFA975B4E59
714DBF6C3EF94FEAC21> |-
/.notdef <1C60D8A8C9B8524C50> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/VTGQVI+LMSans12-Regular /OWTBAA+LMSans12-Regular findfont ct_VMDictPut
/VTGQVI+LMSans12-Regular*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /three 2{/.notdef}rp /six 3{/.notdef}rp /colon 
11{/.notdef}rp /F /G 6{/.notdef}rp /N 7{/.notdef}rp /V 10{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i 2{/.notdef}rp /l /m /n /o /p /.notdef 
/r /s /t /u /.notdef /w /x /y 
8{/.notdef}rp /fl 125{/.notdef}rp]
VTGQVI+LMSans12-Regular nf
VTGQVI+LMSans12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
56.693 343.619 mo
(Figure3.26:Neutrino\202uxesforthereferencefocusingsystemoperatinginneutrinomode\(left\)and)
[6.64837 2.75329 5.85319 6.00515 3.97752 9.75779 5.85319 3.25185 5.85318 5.8532 9.75549 8.20478 
5.20285 6.00516 4.22745 3.97752 2.75328 6.00516 10.4081 6.25488 6.00514 5.35481 5.20285 9.04178 
3.57693 5.5304 8.53247 4.22745 6.00513 9.75781 3.97751 5.20285 3.57693 5.20285 3.97754 5.20285 
6.00516 5.20285 9.74582 3.57693 6.18793 5.20285 6.00516 4.48685 2.75327 6.00516 10.4081 4.48685 
5.35483 4.48685 4.22745 5.20285 13.812 5.85318 6.32794 5.20285 3.97754 5.60342 4.22745 2.7533 
6.00516 10.4081 2.7533 10.5601 6.00516 5.20288 6.00513 4.22745 3.97754 2.7533 6.00513 10.4081 
9.25699 6.17599 6.00513 9.75781 4.55252 2.7533 5.20288 3.5769 4.22742 9.10748 5.60345 6.00513 
0 ]xsh
56.693 358.065 mo
(antineutrinomode\(right\),generatedwitha120)
[5.60345 6.00514 4.22745 2.75329 6.00515 5.20286 6.00514 4.22745 3.97752 2.7533 6.00514 9.76254 
9.25699 6.17599 6.00513 9.10027 4.55252 3.97752 2.7533 5.85318 6.00516 4.22745 4.55252 7.16119 
5.85318 5.20285 6.00516 5.20285 3.97754 5.60345 4.22742 5.20288 9.90253 7.95615 2.7533 4.22745 
9.90256 9.51279 5.85318 5.85321 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VKNBAA+LMMathSymbols10-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VKNBAA+LMMathSymbols10-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def
/Weight (Normal) def
/ItalicAngle -14.0362 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 173 /minus put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 0 40 45 683 711 750 772] def
/BlueScale 0.03572 def
/BlueFuzz 0 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [22 25 31 40 43 45 55 56 62 65 67 92] def
/StemSnapV [22 25 28 36 40 44 56 67 81 83 85 770] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B08A946182837629008DF77029A2478D0316F5CDDAB16A
82B74000B6F3006BA10D289F3F35D30EF9D36B1027B1EC> |-
/.notdef <1C60D8A8C9B8524C50> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/VTGQVJ+LMMathSymbols10-Regular /VKNBAA+LMMathSymbols10-Regular findfont ct_VMDictPut
/VTGQVJ+LMMathSymbols10-Regular*1 
[173{/.notdef}rp /minus 82{/.notdef}rp]
VTGQVJ+LMMathSymbols10-Regular nf
VTGQVJ+LMMathSymbols10-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
291.93 358.065 mo
(\255)sh
VTGQVI+LMSans12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
301.228 358.065 mo
(GeVprimaryprotonbeam.)
[7.8031 4.22253 11.6444 5.68237 3.97751 2.7533 9.25702 5.28064 3.97754 9.2522 5.68237 3.97751 
5.85321 4.22745 5.85318 9.90253 6.32794 5.20288 5.60342 9.25702 0 ]xsh
56.693 649.779 mo
281.038 649.779 li
281.038 467.452 li
56.693 467.452 li
cp
0 0 0 0 cmyk
ef
90.3448 626.988 mo
269.821 626.988 li
269.821 480.215 li
90.3448 480.215 li
cp
ef
90.3448 626.988 mo
269.821 626.988 li
269.821 480.215 li
90.3448 480.215 li
cp
.750179 .679652 .670191 .901488 cmyk
@
90.3448 626.988 mo
269.821 626.988 li
269.821 480.215 li
90.3448 480.215 li
cp
0 0 0 0 cmyk
ef
90.3448 626.988 mo
269.821 626.988 li
269.821 480.215 li
90.3448 480.215 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.89037 lw
90.3448 626.988 mo
269.821 626.988 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 
/one /two /three /four /five /six /seven /eight 
/nine 11{/.notdef}rp /E /.notdef /G 7{/.notdef}rp /O /P 
3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a 3{/.notdef}rp /e 
/f /g 3{/.notdef}rp /k /l /m /n /o 
2{/.notdef}rp /r /.notdef /t /u 2{/.notdef}rp /x /y 
134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
148.607 643.401 mo
(Proton Energy \(GeV\))
[4.50412 2.24866 3.75459 1.8773 3.75461 3.75459 1.8773 4.50412 3.75459 3.75461 2.24866 3.75461 
3.37643 1.8773 2.24866 5.25374 3.75461 4.50412 0 ]xsh
90.3448 622.612 mo
90.3448 626.988 li
@
97.8229 624.8 mo
97.8229 626.988 li
@
105.301 624.8 mo
105.301 626.988 li
@
112.779 624.8 mo
112.779 626.988 li
@
120.257 622.612 mo
120.257 626.988 li
@
127.736 624.8 mo
127.736 626.988 li
@
135.214 624.8 mo
135.214 626.988 li
@
142.692 624.8 mo
142.692 626.988 li
@
150.17 622.612 mo
150.17 626.988 li
@
157.648 624.8 mo
157.648 626.988 li
@
165.127 624.8 mo
165.127 626.988 li
@
172.605 624.8 mo
172.605 626.988 li
@
180.083 622.612 mo
180.083 626.988 li
@
187.561 624.8 mo
187.561 626.988 li
@
195.039 624.8 mo
195.039 626.988 li
@
202.517 624.8 mo
202.517 626.988 li
@
209.996 622.612 mo
209.996 626.988 li
@
217.474 624.8 mo
217.474 626.988 li
@
224.952 624.8 mo
224.952 626.988 li
@
232.43 624.8 mo
232.43 626.988 li
@
239.908 622.612 mo
239.908 626.988 li
@
247.387 624.8 mo
247.387 626.988 li
@
254.864 624.8 mo
254.864 626.988 li
@
262.343 624.8 mo
262.343 626.988 li
@
269.821 622.612 mo
269.821 626.988 li
@
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
86.5181 633.647 mo
(20)
[3.7546 0 ]xsh
116.343 633.647 mo
(40)
[3.7546 0 ]xsh
146.356 633.647 mo
(60)
[3.75459 0 ]xsh
176.181 633.647 mo
(80)
[3.75459 0 ]xsh
204.318 633.647 mo
(100)
[3.75459 3.75461 0 ]xsh
234.143 633.647 mo
(120)
[3.75459 3.75461 0 ]xsh
gsave
56.693 649.779 mo
281.038 649.779 li
281.038 467.452 li
56.693 467.452 li
cp
clp
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
264.156 633.647 mo
(140)
[3.75458 3.75461 0 ]xsh
grestore
90.3448 626.988 mo
90.3448 480.215 li
@
VTGQVF+ArialMT*1 [0 -4.50191 -4.50191 0 0 0 ]msf
72.0745 543.046 mo
(2)sh
true set_gvm
%%IncludeResource: font Symbol
/VTGQVG+Symbol*1 
[68{/.notdef}rp /Delta 30{/.notdef}rp /chi 9{/.notdef}rp /mu /nu 145{/.notdef}rp]
VTGQVG+Symbol nf
reset_gvm
VTGQVG+Symbol*1 [0 -6.75288 -6.75288 0 0 0 ]msf
74.8882 546.61 mo
(c)sh
74.8882 550.737 mo
(D)sh
68.6981 553.738 mo
76.3888 552.613 li
@
.29679 lw
76.3888 552.613 mo
66.8223 551.487 li
@
66.8223 551.487 mo
66.8223 540.608 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 5{/.notdef}rp /slash /zero 
/one /two /three /four /five /six /seven /eight 
/nine 3{/.notdef}rp /equal 7{/.notdef}rp /E /.notdef /G 7{/.notdef}rp 
/O /P 3{/.notdef}rp /T /.notdef /V 10{/.notdef}rp /a 
3{/.notdef}rp /e /f /g 3{/.notdef}rp /k /l /m 
/n /o 2{/.notdef}rp /r /.notdef /t /u 2{/.notdef}rp 
/x /y 134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [0 -6.75288 -6.75288 0 0 0 ]msf
74.8882 562.179 mo
( = )
[-1.87732 -3.94366 0 ]ysh
true set_gvm
%%IncludeResource: font Symbol
/VTGQVG+Symbol*1 
[68{/.notdef}rp /Delta 30{/.notdef}rp /chi 9{/.notdef}rp /mu /nu 4{/.notdef}rp 
/sigma 140{/.notdef}rp]
VTGQVG+Symbol nf
reset_gvm
VTGQVG+Symbol*1 [0 -6.75288 -6.75288 0 0 0 ]msf
74.8882 566.306 mo
(s)sh
.89037 lw
95.7627 613.669 mo
90.3448 613.669 li
@
93.0537 608.331 mo
90.3448 608.331 li
@
93.0537 602.993 mo
90.3448 602.993 li
@
93.0537 597.655 mo
90.3448 597.655 li
@
93.0537 592.316 mo
90.3448 592.316 li
@
95.7627 586.978 mo
90.3448 586.978 li
@
93.0537 581.64 mo
90.3448 581.64 li
@
93.0537 576.302 mo
90.3448 576.302 li
@
93.0537 570.964 mo
90.3448 570.964 li
@
93.0537 565.626 mo
90.3448 565.626 li
@
95.7627 560.287 mo
90.3448 560.287 li
@
93.0537 554.949 mo
90.3448 554.949 li
@
93.0537 549.611 mo
90.3448 549.611 li
@
93.0537 544.273 mo
90.3448 544.273 li
@
93.0537 538.935 mo
90.3448 538.935 li
@
95.7627 533.596 mo
90.3448 533.596 li
@
93.0537 528.258 mo
90.3448 528.258 li
@
93.0537 522.92 mo
90.3448 522.92 li
@
93.0537 517.582 mo
90.3448 517.582 li
@
93.0537 512.244 mo
90.3448 512.244 li
@
95.7627 506.905 mo
90.3448 506.905 li
@
93.0537 501.567 mo
90.3448 501.567 li
@
93.0537 496.229 mo
90.3448 496.229 li
@
93.0537 490.891 mo
90.3448 490.891 li
@
93.0537 485.553 mo
90.3448 485.553 li
@
95.7627 480.215 mo
90.3448 480.215 li
@
95.7627 613.669 mo
90.3448 613.669 li
@
93.0537 619.007 mo
90.3448 619.007 li
@
93.0537 624.346 mo
90.3448 624.346 li
@
true set_gvm
%%IncludeResource: font Arial-BoldMT
/VTGQVH+Arial-BoldMT*1 
[51{/.notdef}rp /three /four /five /six /seven /eight 44{/.notdef}rp 
/e 154{/.notdef}rp]
VTGQVH+Arial-BoldMT nf
reset_gvm
VTGQVH+Arial-BoldMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
85.5802 616.202 mo
(3)sh
85.5802 589.566 mo
(4)sh
85.5802 562.554 mo
(5)sh
85.5802 536.106 mo
(6)sh
85.5802 509.469 mo
(7)sh
85.5802 482.833 mo
(8)sh
105.301 577.698 mo
120.257 561.846 li
135.214 550.204 li
150.17 541.296 li
195.039 543.984 li
239.908 544.56 li
254.864 546.551 li
254.864 580.618 li
239.908 578.719 li
195.039 576.197 li
150.17 571.854 li
135.214 577.837 li
120.257 586.408 li
105.301 598.775 li
0 .990631 1 .000396735 cmyk
ef
105.301 598.775 mo
120.257 586.408 li
135.214 577.837 li
150.17 571.854 li
195.039 576.197 li
239.908 578.719 li
254.864 580.618 li
.750179 .679652 .670191 .901488 cmyk
@
[1.18716 1.18716 ] 0 dsh
105.301 577.698 mo
120.257 561.846 li
135.214 550.204 li
150.17 541.296 li
195.039 543.984 li
239.908 544.56 li
254.864 546.551 li
@
92.5882 516.68 mo
157.648 516.68 li
157.648 482.038 li
92.5882 482.038 li
cp
0 0 0 0 cmyk
ef
.750179 .679652 .670191 .901488 cmyk
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C /D /E 
/.notdef /G /H 5{/.notdef}rp /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /.notdef 
/c /.notdef /e /f /g /h /i /.notdef 
/k /l /m /n /o 2{/.notdef}rp /r /s 
/t /u /v /.notdef /x /y 134{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
95.7096 488.085 mo
(DUNE Sensitivity)
[5.0109 5.0109 5.0109 4.62923 1.92944 4.62923 3.85889 3.85889 3.47023 1.54066 1.92944 1.54068 
3.47023 1.54068 1.92944 0 ]xsh
95.7096 496.902 mo
(Normal Hierarchy)
[5.0109 3.85889 2.31112 5.78135 3.85889 1.54068 1.92944 5.0109 1.54068 3.85889 2.31111 3.85889 
2.31113 3.47023 3.85889 0 ]xsh
118.407 505.718 mo
( = 0.085)
[1.92944 4.05322 1.92944 3.85889 1.92944 3.85889 3.8589 0 ]xsh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
113.529 507.969 mo
(13)
[2.50306 0 ]xsh
true set_gvm
%%IncludeResource: font Symbol
/VTGQVG+Symbol*1 
[68{/.notdef}rp /Delta 30{/.notdef}rp /chi 9{/.notdef}rp /mu /nu 2{/.notdef}rp 
/theta /.notdef /sigma 140{/.notdef}rp]
VTGQVG+Symbol nf
reset_gvm
VTGQVG+Symbol*1 [6.94045 0 0 -6.94045 0 0 ]msf
110.153 505.718 mo
(q)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
106.589 505.718 mo
(2)sh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
104.151 502.717 mo
(2)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
95.7096 505.718 mo
(sin)
[3.47022 1.54068 0 ]xsh
114.843 514.347 mo
( = 0.45)
[1.92944 4.05322 1.92944 3.85889 1.92944 3.85889 0 ]xsh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
109.966 516.597 mo
(23)
[2.50306 0 ]xsh
VTGQVG+Symbol*1 [6.94045 0 0 -6.94045 0 0 ]msf
106.589 514.347 mo
(q)sh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
104.151 511.345 mo
(2)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
95.7096 514.347 mo
(sin)
[3.47022 1.54068 0 ]xsh
VTGQVF+ArialMT*1 [5.81499 0 0 -5.81499 0 0 ]msf
206.382 488.461 mo
(CDR Reference Design)
[4.19832 4.19833 4.19833 1.61656 4.19833 3.23314 1.61656 3.23314 1.93634 3.23314 3.23312 2.9075 
3.23312 1.61656 4.19833 3.23312 2.9075 1.29083 3.23312 0 ]xsh
[] 0 dsh
187.851 486.596 mo
203.162 486.596 li
@
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C /D /E 
/.notdef /G /H 5{/.notdef}rp /N /O /P /.notdef 
/R /S /T /U /V 10{/.notdef}rp /a /.notdef 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /.notdef /x /y /z 
133{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [5.81499 0 0 -5.81499 0 0 ]msf
206.382 497.652 mo
(Optimized Design)
[4.52405 3.23314 1.61656 1.29083 4.84384 1.29085 2.90749 3.23314 3.23312 1.61658 4.19832 3.23314 
2.90749 1.29085 3.23312 0 ]xsh
[1.18716 1.18716 ] 0 dsh
187.851 495.713 mo
203.162 495.713 li
@
109.317 477.142 mo
228.414 477.142 li
228.414 468.363 li
109.317 468.363 li
cp
0 0 0 0 cmyk
ef
gsave
56.693 649.779 mo
281.038 649.779 li
281.038 467.452 li
56.693 467.452 li
cp
clp
.750179 .679652 .670191 .901488 cmyk
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C /D /E 
/.notdef /G /H 4{/.notdef}rp /M /N /O /P 
/.notdef /R /S /T /U /V 10{/.notdef}rp /a 
/.notdef /c /d /e /f /g /h /i 
/.notdef /k /l /m /n /o /p /.notdef 
/r /s /t /u /v /.notdef /x /y 
/z 133{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
115.781 474.579 mo
(Median Mass Hierarchy Sensitivity)
[5.78134 3.85889 3.85889 1.54068 3.85889 3.85889 1.92944 5.78134 3.8589 3.47021 3.47023 1.92944 
5.01091 1.54068 3.85889 2.31111 3.8589 2.31111 3.47023 3.85889 3.47023 1.92944 4.62923 3.8589 
3.85889 3.47023 1.54068 1.92943 1.54068 3.47023 1.54068 1.92944 0 ]xsh
grestore
327.03 649.779 mo
551.375 649.779 li
551.375 467.452 li
327.03 467.452 li
cp
ef
360.682 626.988 mo
540.158 626.988 li
540.158 480.215 li
360.682 480.215 li
cp
ef
.29679 lw
[] 0 dsh
360.682 626.988 mo
540.158 626.988 li
540.158 480.215 li
360.682 480.215 li
cp
.750179 .679652 .670191 .901488 cmyk
@
360.682 626.988 mo
540.158 626.988 li
540.158 480.215 li
360.682 480.215 li
cp
0 0 0 0 cmyk
ef
360.682 626.988 mo
540.158 626.988 li
540.158 480.215 li
360.682 480.215 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.89037 lw
360.682 626.988 mo
540.158 626.988 li
@
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
418.944 643.401 mo
(Proton Energy \(GeV\))
[4.50412 2.24866 3.75458 1.87732 3.75461 3.75458 1.87732 4.50412 3.75458 3.75461 2.24866 3.75461 
3.37643 1.87732 2.24866 5.25372 3.75461 4.50412 0 ]xsh
360.682 622.612 mo
360.682 626.988 li
@
368.16 624.8 mo
368.16 626.988 li
@
375.638 624.8 mo
375.638 626.988 li
@
383.116 624.8 mo
383.116 626.988 li
@
390.594 622.612 mo
390.594 626.988 li
@
398.073 624.8 mo
398.073 626.988 li
@
405.551 624.8 mo
405.551 626.988 li
@
413.029 624.8 mo
413.029 626.988 li
@
420.507 622.612 mo
420.507 626.988 li
@
427.985 624.8 mo
427.985 626.988 li
@
435.464 624.8 mo
435.464 626.988 li
@
442.941 624.8 mo
442.941 626.988 li
@
450.42 622.612 mo
450.42 626.988 li
@
457.898 624.8 mo
457.898 626.988 li
@
465.376 624.8 mo
465.376 626.988 li
@
472.854 624.8 mo
472.854 626.988 li
@
480.333 622.612 mo
480.333 626.988 li
@
487.811 624.8 mo
487.811 626.988 li
@
495.289 624.8 mo
495.289 626.988 li
@
502.767 624.8 mo
502.767 626.988 li
@
510.245 622.612 mo
510.245 626.988 li
@
517.724 624.8 mo
517.724 626.988 li
@
525.201 624.8 mo
525.201 626.988 li
@
532.68 624.8 mo
532.68 626.988 li
@
540.158 622.612 mo
540.158 626.988 li
@
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
356.855 633.647 mo
(20)
[3.75458 0 ]xsh
386.68 633.647 mo
(40)
[3.75458 0 ]xsh
416.693 633.647 mo
(60)
[3.75458 0 ]xsh
446.518 633.647 mo
(80)
[3.75458 0 ]xsh
474.655 633.647 mo
(100)
[3.75458 3.75461 0 ]xsh
504.48 633.647 mo
(120)
[3.75458 3.75461 0 ]xsh
gsave
327.03 649.779 mo
551.375 649.779 li
551.375 467.452 li
327.03 467.452 li
cp
clp
VTGQVF+ArialMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
534.493 633.647 mo
(140)
[3.75458 3.75458 0 ]xsh
grestore
360.682 626.988 mo
360.682 480.215 li
@
VTGQVF+ArialMT*1 [0 -4.50191 -4.50191 0 0 0 ]msf
342.411 543.046 mo
(2)sh
VTGQVG+Symbol*1 [0 -6.75288 -6.75288 0 0 0 ]msf
345.225 546.61 mo
(c)sh
345.225 550.737 mo
(D)sh
339.035 553.738 mo
346.726 552.613 li
@
.29679 lw
346.726 552.613 mo
337.159 551.487 li
@
337.159 551.487 mo
337.159 540.608 li
@
VTGQVF+ArialMT*1 [0 -6.75288 -6.75288 0 0 0 ]msf
345.225 562.179 mo
( = )
[-1.87732 -3.94366 0 ]ysh
VTGQVG+Symbol*1 [0 -6.75288 -6.75288 0 0 0 ]msf
345.225 566.306 mo
(s)sh
.89037 lw
366.1 608.722 mo
360.682 608.722 li
@
363.391 604.132 mo
360.682 604.132 li
@
363.391 599.543 mo
360.682 599.543 li
@
363.391 594.953 mo
360.682 594.953 li
@
366.1 590.364 mo
360.682 590.364 li
@
363.391 585.774 mo
360.682 585.774 li
@
363.391 581.184 mo
360.682 581.184 li
@
363.391 576.595 mo
360.682 576.595 li
@
366.1 572.005 mo
360.682 572.005 li
@
363.391 567.416 mo
360.682 567.416 li
@
363.391 562.826 mo
360.682 562.826 li
@
363.391 558.237 mo
360.682 558.237 li
@
366.1 553.647 mo
360.682 553.647 li
@
363.391 549.058 mo
360.682 549.058 li
@
363.391 544.468 mo
360.682 544.468 li
@
363.391 539.878 mo
360.682 539.878 li
@
366.1 535.289 mo
360.682 535.289 li
@
363.391 530.699 mo
360.682 530.699 li
@
363.391 526.11 mo
360.682 526.11 li
@
363.391 521.521 mo
360.682 521.521 li
@
366.1 516.931 mo
360.682 516.931 li
@
363.391 512.341 mo
360.682 512.341 li
@
363.391 507.752 mo
360.682 507.752 li
@
363.391 503.162 mo
360.682 503.162 li
@
366.1 498.573 mo
360.682 498.573 li
@
363.391 493.983 mo
360.682 493.983 li
@
363.391 489.394 mo
360.682 489.394 li
@
363.391 484.804 mo
360.682 484.804 li
@
366.1 480.215 mo
360.682 480.215 li
@
366.1 608.722 mo
360.682 608.722 li
@
363.391 613.311 mo
360.682 613.311 li
@
363.391 617.901 mo
360.682 617.901 li
@
363.391 622.49 mo
360.682 622.49 li
@
true set_gvm
%%IncludeResource: font Arial-BoldMT
/VTGQVH+Arial-BoldMT*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /two /three /four /five 
/six /seven /eight 44{/.notdef}rp /e 154{/.notdef}rp]
VTGQVH+Arial-BoldMT nf
reset_gvm
VTGQVH+Arial-BoldMT*1 [6.75288 0 0 -6.75288 0 0 ]msf
350.29 611.325 mo
(1.4)
[3.75458 1.87732 0 ]xsh
350.29 592.943 mo
(1.6)
[3.75458 1.87732 0 ]xsh
350.29 574.56 mo
(1.8)
[3.75458 1.87732 0 ]xsh
355.917 556.177 mo
(2)sh
350.29 537.794 mo
(2.2)
[3.75458 1.87732 0 ]xsh
350.29 519.411 mo
(2.4)
[3.75458 1.87732 0 ]xsh
350.29 501.028 mo
(2.6)
[3.75458 1.87732 0 ]xsh
350.29 482.833 mo
(2.8)
[3.75458 1.87732 0 ]xsh
375.638 585.089 mo
390.594 562.783 li
405.551 547.625 li
420.507 536.836 li
465.376 538.97 li
510.245 539.721 li
525.201 541.752 li
525.201 570.19 li
510.245 568.033 li
465.376 566.346 li
420.507 563.818 li
405.551 573.388 li
390.594 587.613 li
375.638 607.552 li
0 .990631 1 .000396735 cmyk
ef
375.638 607.552 mo
390.594 587.613 li
405.551 573.388 li
420.507 563.818 li
465.376 566.346 li
510.245 568.033 li
525.201 570.19 li
.750179 .679652 .670191 .901488 cmyk
@
[1.18716 1.18716 ] 0 dsh
375.638 585.089 mo
390.594 562.783 li
405.551 547.625 li
420.507 536.836 li
465.376 538.97 li
510.245 539.721 li
525.201 541.752 li
@
362.925 516.68 mo
427.985 516.68 li
427.985 482.038 li
362.925 482.038 li
cp
0 0 0 0 cmyk
ef
.750179 .679652 .670191 .901488 cmyk
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
366.047 488.085 mo
(DUNE Sensitivity)
[5.01089 5.01089 5.01089 4.62924 1.92944 4.62921 3.85892 3.85889 3.47021 1.54068 1.92944 1.54068 
3.47021 1.54068 1.92944 0 ]xsh
366.047 496.902 mo
(Normal Hierarchy)
[5.01089 3.85889 2.31113 5.78134 3.85889 1.54068 1.92944 5.01089 1.54068 3.85889 2.31113 3.85889 
2.31113 3.47021 3.85889 0 ]xsh
388.744 505.718 mo
( = 0.085)
[1.92944 4.05322 1.92944 3.85889 1.92944 3.85889 3.85889 0 ]xsh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
383.866 507.969 mo
(13)
[2.50305 0 ]xsh
VTGQVG+Symbol*1 [6.94045 0 0 -6.94045 0 0 ]msf
380.49 505.718 mo
(q)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
376.926 505.718 mo
(2)sh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
374.487 502.717 mo
(2)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
366.047 505.718 mo
(sin)
[3.47021 1.54068 0 ]xsh
385.18 514.347 mo
( = 0.45)
[1.92944 4.05322 1.92944 3.85889 1.92944 3.85889 0 ]xsh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
380.303 516.597 mo
(23)
[2.50305 0 ]xsh
VTGQVG+Symbol*1 [6.94045 0 0 -6.94045 0 0 ]msf
376.926 514.347 mo
(q)sh
VTGQVF+ArialMT*1 [4.50191 0 0 -4.50191 0 0 ]msf
374.487 511.345 mo
(2)sh
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
366.047 514.347 mo
(sin)
[3.47021 1.54068 0 ]xsh
VTGQVF+ArialMT*1 [5.81499 0 0 -5.81499 0 0 ]msf
476.719 488.461 mo
(CDR Reference Design)
[4.1983 4.19833 4.19833 1.61658 4.19833 3.23312 1.61658 3.23312 1.93634 3.23315 3.23312 2.9075 
3.23309 1.61658 4.1983 3.23315 2.90747 1.29089 3.23309 0 ]xsh
[] 0 dsh
458.188 486.596 mo
473.499 486.596 li
@
VTGQVF+ArialMT*1 [5.81499 0 0 -5.81499 0 0 ]msf
476.719 497.652 mo
(Optimized Design)
[4.52405 3.23312 1.61658 1.29083 4.84384 1.29083 2.9075 3.23312 3.23312 1.61658 4.19833 3.23312 
2.90747 1.29083 3.23315 0 ]xsh
[1.18716 1.18716 ] 0 dsh
458.188 495.713 mo
473.499 495.713 li
@
389.877 477.142 mo
488.528 477.142 li
488.528 468.363 li
389.877 468.363 li
cp
0 0 0 0 cmyk
ef
gsave
327.03 649.779 mo
551.375 649.779 li
551.375 467.452 li
327.03 467.452 li
cp
clp
.750179 .679652 .670191 .901488 cmyk
true set_gvm
%%IncludeResource: font ArialMT
/VTGQVF+ArialMT*1 
[32{/.notdef}rp /space 4{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 4{/.notdef}rp 
/period /slash /zero /one /two /three /four /five 
/six /seven /eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C 
/D /E /.notdef /G /H 4{/.notdef}rp /M /N 
/O /P /.notdef /R /S /T /U /V 
10{/.notdef}rp /a /.notdef /c /d /e /f /g 
/h /i /.notdef /k /l /m /n /o 
/p /.notdef /r /s /t /u /v /.notdef 
/x /y /z 133{/.notdef}rp]
VTGQVF+ArialMT nf
reset_gvm
VTGQVF+ArialMT*1 [6.94045 0 0 -6.94045 0 0 ]msf
395.684 474.579 mo
(75% CP Violation Sensitivity)
[3.85889 3.85889 6.17001 1.92944 5.01089 4.62921 1.92947 4.62921 1.54068 3.85889 1.54068 3.85889 
1.92944 1.54068 3.85889 3.85889 1.92944 4.62924 3.85889 3.85889 3.47025 1.54065 1.92944 1.54068 
3.47025 1.54068 1.92944 0 ]xsh
grestore
1 /0 /CSD get_res sepcs
1 sep
true set_gvm
%ADOBeginSubsetFont: OWTBAA+LMSans12-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VTGQVI+LMSans12-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B6A5F43FE923456F224760DA46DE0BE1D5E5BC7D112B
1E0AE371FEDFC98BC5424A767F2CF673C4338ACB19AAECB1D4906ABE0E77BBBF
D40CE767E7363F3E2EA4885C170D120761A94D359FB0B02049FE1B8E67E659CB
48169C0CF7FC3DA177FC6F2CFCAC565D0F0B3F68E62D1C0643A7BCF212E6C9D8
81A8CE1B9C99BBB0E345C9E2771B60B1A88C4A18AD9AA501CFD0BA2A85492C8D
C448746545AA539D8B878A9539C8DE5512DE01404D7C71E16D5AA08D40F139E2
729DC4EE4D76C1C6BE4EB67047DB4B4F39C4> |-
/five <1C60D8A8C9B08A95A31CD7D9F2175101BCEB4601C2FE94FB89D18D036
37DD01C03D8A42C125DE42AECB5623393361FE9CB34EF444C5A4E87D9C8802CD
BC41E8D3F75D1A1106C56EAC7CEDFD76D817160D14AE2814DE8FC5BD98D000C0
8B7CF3CF77F478DBFAE21B060CE53938705BF> |-
/seven <1C60D8A8C9B08A95A31CD7D9F217B1599BB72DFDFFFFBDFC1981A45A
CBA4C92146030CB7720518EF692641BA5658EDF025DFE1C257D3674076108ED7
DB8DB821A57F3522582497EA710BEB> |-
/eight <1C60D8A8C9B08A95A31CD7D9F2175101BCE4479BE3B00185A0D39A11
FD1B0484F45AA61B852C186F738BFBF90A4A2D75967CB9F5CDF166015B770988
2F9812BF438ED0D9577AE88C77816A4925B6F7F1F903CC25E596FD7048D66E99
985E3A04EDA0F85011420EB1C6C42815C71D4643817344F02637B1B2787FDEC8
748DA905AAF778B6BD6696D5AD6D9A8C> |-
/M <1C60D8A8C9B08A9405F8FB94046DC9291DF119FB4AC5BBE418F65999807D
0D4DF272C8B237600ED98F317B81B7A2790F1AA3AB692DDE8E94FF8B42D041CB
13FAE848B3A28E9FB5B9C0C14487B3F66F446D1A76051807B2BDAAC50B9EBD54
3BE0BA3A40977A4F055A64980147FEFB87> |-
/k <1C60D8A8C9B08A95A528F5B0D23922D8CEC98B96051F533085EDCB197164
42577FF5A191287E10E818B62EADA6509992C72EF070FEBDE14D4E429979FD22
2D39F3BAC147C52E0998709C6668> |-
/v <1C60D8A8C9B08A95B2CCC00C0CACFC615DA4E898158BFC34C59AA4254ACA
3F626CBD7E0AD30312673D4C6974114B7C8FD0FD1C764326650EB486A614CAAB
9762927E592B99221167> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VTGQVI+LMSans12-Regular /Encoding get
dup 37 /percent put
dup 53 /five put
dup 55 /seven put
dup 56 /eight put
dup 77 /M put
dup 107 /k put
dup 118 /v put
pop
%ADOEndSubsetFont
reset_gvm
/VTGQVI+LMSans12-Regular*1 
[37{/.notdef}rp /percent 2{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one /two /three /.notdef /five 
/six /seven /eight /.notdef /colon 11{/.notdef}rp /F /G 
5{/.notdef}rp /M /N 7{/.notdef}rp /V 10{/.notdef}rp /a /b 
/c /d /e /f /g /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v /w /x /y 8{/.notdef}rp 
/fl 125{/.notdef}rp]
VTGQVI+LMSans12-Regular nf
VTGQVI+LMSans12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
56.693 669.705 mo
(Figure3.27:Minimummasshierarchysensitivity\(left\)andcoverageof75%ofpossiblevaluesof)
[6.64837 2.75329 5.85319 6.00515 3.97752 9.26762 5.85319 3.25185 5.85319 5.8532 8.7871 10.156 
2.7533 6.00516 2.7533 9.25699 6.00514 13.3218 9.257 5.60344 4.48685 8.55164 6.00513 2.7533 
5.20288 3.97751 5.28067 3.97751 5.20285 6.00516 9.41959 4.48685 5.20285 6.00516 4.48685 2.7533 
4.22745 2.75327 5.35483 2.76523 3.8927 9.41959 4.55252 2.7533 5.20285 3.57693 4.22745 8.61728 
5.60345 6.00516 10.0818 5.20285 5.85321 5.3548 5.20285 3.97754 5.60345 5.85318 9.26764 5.85318 
7.64169 5.85318 5.85321 13.8201 5.85318 7.64169 6.32794 5.85318 4.48685 4.48685 2.7533 6.00516 
2.7533 9.26761 5.35483 5.60342 2.76526 6.00516 5.20285 8.55164 5.85315 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VXEBAA+LMMathItalic12-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VXEBAA+LMMathItalic12-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def
/Weight (Normal) def
/ItalicAngle -14.0362 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 211 /delta put
def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/BlueScale 0.04546 def
/BlueFuzz 0 def
/StdHW [29] def
/StdVW [59] def
/StemSnapH [19 20 22 24 27 29 36 37 40 54 80 81] def
/StemSnapV [20 22 56 59 60 65 67 79 81 83 84 86] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/delta <1C60D8A8C9B08A95B5C1CF20021FBE96A729F9F0EB75CDD4881B7418
C7E58749A34889DF7F9AF3AD2D0C24738664D3DFA0EF749F5ABF0D32E8F4C65D
ED28DEFFF171D5CF22FEDB1DD53A6B2E37A337004F5FDB56FA0FF8E5F048E79F
1937E14639B8350A17AE63CC2EC4AF2DF653C47E969D983254BD3E65329B4923
91ADB02AB8A8EE1F6D88D5C61BE43414FD167E11728C2C4C24218988D4F4835B
E288690741579BE1ED54C596BF1CEBEABB0DD898D415643001762888E3D888D6
F5DF0F08C2B1D7104495DFC9E0FC0AF915C184C510472BE93D89A44933D05667
107880F0498C5868E7B5CDB4E022FC1884E3E5A1B3389DC8B1B2EC4CB05491AF
C9FB183995EB72DD10F23FB397BF911FD18EC6FE0DEB9B6FA9> |-
/.notdef <1C60D8A8C9B8524C50> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/VTGQVK+LMMathItalic12-Regular /VXEBAA+LMMathItalic12-Regular findfont ct_VMDictPut
/VTGQVK+LMMathItalic12-Regular*1 
[211{/.notdef}rp /delta 44{/.notdef}rp]
VTGQVK+LMMathItalic12-Regular nf
VTGQVK+LMMathItalic12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
536.481 669.705 mo
(\323)sh
true set_gvm
%ADOBeginSubsetFont: JZUBAA+LMMathItalic8-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JZUBAA+LMMathItalic8-Regular def
/FontInfo 7 dict dup begin
/Notice (Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).) def
/Weight (Normal) def
/ItalicAngle -14.0362 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 67 /C put
dup 80 /P put
def
/FontBBox {-24 -250 1110 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/BlueScale 0.04546 def
/BlueFuzz 0 def
/StdHW [28] def
/StdVW [72] def
/StemSnapH [26 28 30 31 33 45 46 66 71 77 90 92] def
/StemSnapV [31 36 46 69 70 72 73 78 81 95 96 101] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/C <1C60D8A8C9B08A94690CF6E2997B2DD27D47DC4A9CF95D88EF122B729914
71D75DEE10A86929665426D28B451F7F8884AABAB96D808A294E122B18C8E802
2632EE6846F660AFF70BE04300C2DAFBA4A11E1874DB5227D0037C3F6743CE24
FC0B58D3FBB8B3CAD1069E917CC6B2C643CAD9AEAB09DDC624438220964D21EC
38D1751EBFE928798BF9016702A4A6506C8DF659A630E2403BDB76C0485AD5CF
33F9C4AD674A> |-
/P <1C60D8A8C9B08A9449D4FE61E37B44869FAC864F1BA1B3E5F86456554413
22B45EC6B8EBA65F5F93F417BC392A17543A84F85EAFE577F14921517139479C
5BB6DAE26C3078FCD960B075FC7BF70219C2CEA8AA5CD3E29EB582D9557F0ECF
2C508D97C6E5B7BB33B96BF57A25E3871B1651283F3DEA44AEFD0687B0296995
A7F8693D76742EE70CB6ED7F40A82FC1084A6C61ACE5A63E267F49F64BB6BDD3
A7F8F4C947CC1AFFCA9E7E2547B1D2981794001FC0910920AEC8D3ED4135FEC3
4A> |-
/.notdef <1C60D8A8C9B8524C50> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/VTGQVL+LMMathItalic8-Regular /JZUBAA+LMMathItalic8-Regular findfont ct_VMDictPut
/VTGQVL+LMMathItalic8-Regular*1 
[67{/.notdef}rp /C 12{/.notdef}rp /P 175{/.notdef}rp]
VTGQVL+LMMathItalic8-Regular nf
VTGQVL+LMMathItalic8-Regular*1 [7.9701 0 0 -7.9701 0 0 ]msf
541.665 671.498 mo
(CP)
[6.60156 0 ]xsh
VTGQVI+LMSans12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
56.6931 684.151 mo
(\(right\)asafunctionofprotonmomentumassuminganexposureof280kt)
[4.55252 3.97752 2.7533 5.85319 6.00515 4.22744 8.44991 5.60345 8.39619 9.50085 3.57693 6.00514 
6.00514 5.20287 4.22743 2.7533 5.8532 9.91449 5.85318 7.47433 5.68234 3.97754 5.85318 4.22745 
5.85318 9.90254 9.257 5.8532 9.25699 5.20287 6.00514 4.22745 6.00514 13.1663 5.60345 4.48688 
4.48682 6.00519 9.25696 2.7533 6.00516 9.75058 5.60345 9.91449 5.20288 5.3548 6.32794 5.85318 
4.48685 6.00516 3.97754 9.10025 5.85318 7.48627 5.85318 5.85321 9.75058 5.67987 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: VKNBAA+LMMathSymbols10-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VTGQVJ+LMMathSymbols10-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/periodcentered <1C60D8A8C9B08A9570810981675914128BE127B37F6B187
0E52A8E7D3172BCF8343C9144FE45026AE1F1D611879B23BC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VTGQVJ+LMMathSymbols10-Regular /Encoding get
dup 183 /periodcentered put
pop
%ADOEndSubsetFont
reset_gvm
/VTGQVJ+LMMathSymbols10-Regular*1 
[173{/.notdef}rp /minus 9{/.notdef}rp /periodcentered 72{/.notdef}rp]
VTGQVJ+LMMathSymbols10-Regular nf
VTGQVJ+LMMathSymbols10-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
424.886 684.151 mo
(\267)sh
VTGQVI+LMSans12-Regular*1 [11.9552 0 0 -11.9552 0 0 ]msf
430.863 684.151 mo
(year)
[5.03201 5.20285 5.28067 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: RYTBAA+LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VTGQVE+LMSans10-Regular dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B7A73DB595D3440ED44643BAB272A8D59CC268BCD57B42
4F32B776A376F4AA253A09FB33FE396764CF233FFAD2F616959E2B58B31DE112
5B1BABC3FABBA5B67FA5B768B8020F> |-
/D <1C60D8A8C9B08A9454CB9E3E2ECB7B9FE23E0FEABCDF464426825CDC277E
6C83ED2D34005DC5AFF388D7F43412C6E1C669286A3779547405D5560478C057
9D75A9F67F25B07394ADDC6440FC3E37A872218A1344FFFDF12714A1> |-
/E <1C60D8A8C9B08A95F50B1739DB3597D285FCEA4B0869AB596EC04216EC9C
D752F9B3306B259A9444742D66382C22FDD0E52D862813C13F206C7A1C4711A2
833680A816C429C55EF39111E6C35279226F8164DB> |-
/F <1C60D8A8C9B08A95C25148D4A67FBEB8A52CA6982E67E5510FE222508391
F0DC3316308482D0719CB7A6729B4758F096F5BC061B37AD9DC5094BD558E087
58A4C5DDEEF3CF> |-
/R <1C60D8A8C9B08A95E015B163861C0FFDC16590AC76BBB7EBC44787090B3C
470A7BA068FAA5457E667E277C522871D519EDD597395A161B21C3FAC997DA44
04176B6DC1E8F1072276D3FD7BB208F0F2D6BC1B979C26E1F0E9C9E0B92882B9
E3F05DC41C9FA8> |-
/T <1C60D8A8C9B08A94478101EE5603E1A87B50AB0269DE9426136A47496588
3D927FEFC25DF4C086F34E3886B3BC7EBEBD26E021200A153CFC62719D5F47D9
2E19ADD618B5108420E798651500DF1F> |-
/U <1C60D8A8C9B08A9506528433F82FAC2304BFAE6BC2236DC1845A762CDDFC
C47B8E45DDB26FD43579BE09E1ACD94A5B1970D48222EA8EB22DE83A58F0046D
7299150BD024492DF4E2DEAF8CE9D03E88B44E> |-
/V <1C60D8A8C9B08A944AAF3A41AE5013678C52724F34106AC5E8E0B4FDE3A3
46D08E66417F74E14E103102970CDC52EC3B16B05771F7AADC4608D931DA519C
C47AAE05062F0F973C> |-
/f <1C60D8A8C9B08A956BA65798425CC2D1BCF645C69786254705F0A1184C4F
0C43E407BDD491B12A865D840357FC8F8945EF2992FE1DE033405E2A1963E46D
6FCE48346BD1FE7822EF6033FAD92D8080C066C101934093DA08> |-
/m <1C60D8A8C9B08A947888CD346A210110290845AEF74D43BB43757A24FE85
2317CFDBFCEE112CE602ED26F543FE8B51AF1CE4D81837E46E7B1F4ACCF5C661
6A93A79A5C71E28430CE8899042070739A29F715349A867E4325FFD717C75786
8F48C63D721C5F526B7B1F657C61E1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VTGQVE+LMSans10-Regular /Encoding get
dup 47 /slash put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 82 /R put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 102 /f put
dup 109 /m put
pop
%ADOEndSubsetFont
reset_gvm
/VTGQVE+LMSans10-Regular*1 
[45{/.notdef}rp /hyphen /.notdef /slash 2{/.notdef}rp /two /three /.notdef 
/five 4{/.notdef}rp /colon 7{/.notdef}rp /B /C /D /E 
/F 5{/.notdef}rp /L /.notdef /N /O /P /.notdef 
/R /.notdef /T /U /V 10{/.notdef}rp /a /.notdef 
/c /.notdef /e /f /g /h /i 2{/.notdef}rp 
/l /m /n /o /p /.notdef /r /s 
/t /u 3{/.notdef}rp /y 28{/.notdef}rp /endash 105{/.notdef}rp]
VTGQVE+LMSans10-Regular nf
VTGQVE+LMSans10-Regular*1 [9.9626 0 0 -9.9626 0 0 ]msf
56.693 765.195 mo
(Volume2:ThePhysicsProgramforDUNEatLBNFLBNF/DUNEConceptualDesignReport)
[6.36314 4.9813 2.38013 5.14761 7.91523 7.74596 4.98129 7.20099 6.78057 5.14761 7.74596 6.36512 
5.1476 4.5938 3.81868 2.38014 4.42841 7.13623 6.36511 3.40427 4.98129 4.98131 3.40428 4.78807 
11.2427 3.0446 4.70235 6.72183 7.19496 6.84929 7.05649 9.2672 4.78809 6.925 5.39674 6.64209 
7.05652 114.425 5.39679 6.64209 7.05646 5.67377 4.98129 7.19498 6.84927 7.05649 9.26721 6.36511 
4.98129 5.14761 4.42841 4.42841 5.14761 3.59747 5.14761 4.78809 5.70764 7.19498 4.42841 3.81866 
2.38013 4.98132 8.46515 6.43384 4.42841 5.42651 4.70239 3.4043 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: font Symbol
%%+ font Arial-BoldMT
%%+ font ArialMT
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize Letter
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
